<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>faithlch</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.faithlch.com/"/>
  <updated>2019-11-24T02:19:26.035Z</updated>
  <id>http://www.faithlch.com/</id>
  
  <author>
    <name>Faith</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="http://www.faithlch.com/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
    <id>http://www.faithlch.com/Markdown基础语法.html</id>
    <published>2019-11-19T15:09:11.086Z</published>
    <updated>2019-11-24T02:19:26.035Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 22:57:03 GMT+0800 (中国标准时间) --><h1 id="Markdown基础语法"><a href="#Markdown基础语法" class="headerlink" title="Markdown基础语法"></a>Markdown基础语法</h1><hr><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><blockquote><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>Markdown 的特点就是，让写作变得更简单，我们不用再考虑如何排版，我们只要专心于写作就好了，其目标就是实现<code>「易读易写」</code>。</p></blockquote><a id="more"></a><hr><h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><h3 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h3><ul><li><p>Markdown支持6种级别的标题，一个#是一级标题，二个#是二级标题，以此类推，对应html标签 <strong>h1 ~ h6</strong>。</p></li><li><p>除此之外，Markdown还支持另外一种形式的标题展示形式，其类似于 <a href="https://link.jianshu.com/?t=http%3A%2F%2Fdocutils.sourceforge.net%2Fmirror%2Fsetext.html" target="_blank" rel="noopener">Setext</a> 标记语言的表现形式，使用下划线进行文本大小的控制。使用这种方式处理标题仅有两种表现形式，即一级标题和二级标题。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">  </span><br><span class="line">## 这是二级标题</span><br><span class="line">  </span><br><span class="line">### 这是三级标题</span><br><span class="line">  </span><br><span class="line">#### 这是四级标题</span><br><span class="line">  </span><br><span class="line">##### 这是三级标题</span><br><span class="line">  </span><br><span class="line">###### 这是四级标题</span><br></pre></td></tr></table></figure><p>以上标记显示效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是三级标题-1"><a href="#这是三级标题-1" class="headerlink" title="这是三级标题"></a>这是三级标题</h5><h6 id="这是四级标题-1"><a href="#这是四级标题-1" class="headerlink" title="这是四级标题"></a>这是四级标题</h6></li></ul><hr><h3 id="2-2-文本"><a href="#2-2-文本" class="headerlink" title="2.2 文本"></a>2.2 文本</h3><h4 id="1-加粗"><a href="#1-加粗" class="headerlink" title="1. 加粗"></a>1. 加粗</h4><p>​ 要加粗的文字左右分别用两个*号（或_号）包起来</p><h4 id="2-斜体"><a href="#2-斜体" class="headerlink" title="2. 斜体"></a>2. 斜体</h4><p>​ 要倾斜的文字左右分别用一个*号或（或_号）包起来</p><h4 id="3-斜体加粗"><a href="#3-斜体加粗" class="headerlink" title="3. 斜体加粗"></a>3. 斜体加粗</h4><p>​ 文字左右分别用三个*号或（或_号）包起来</p><h4 id="4-下划线"><a href="#4-下划线" class="headerlink" title="4. 下划线"></a>4. 下划线</h4><p>​ 使用<code>&lt;u&gt;&lt;/u&gt;</code>，中间写入内容</p><h4 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5. 删除线"></a>5. 删除线</h4><p>​ 要加删除线的文字左右分别用两个~~号包起来</p><p>​ 以上標記示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line"></span><br><span class="line">*这是倾斜的而文字*</span><br><span class="line"></span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line"></span><br><span class="line">&lt;u&gt;这是有下划线的文字&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">~~这是加出现的文字~~</span><br></pre></td></tr></table></figure><p>​ 以上标记显示效果如下：</p><p>​ <strong>这是加粗的文字</strong></p><p>​ <em>这是倾斜的而文字</em></p><p>​ <strong><em>这是斜体加粗的文字</em></strong></p><p>​ <u>这是有下划线的文字</u></p><p>​ <del>这是加出现的文字</del></p><blockquote><p>PS：空行输入&amp;nbsp；换行的话要隔一行</p></blockquote><hr><h3 id="2-3-列表"><a href="#2-3-列表" class="headerlink" title="2.3 列表"></a>2.3 列表</h3><h4 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1. 有序列表"></a>1. 有序列表</h4><p>​ 语法：数字+点 Markdown将只关注你的第一个项目的数字编号，之后按<code>enter</code>会自动排序</p><p>​ 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>​ 效果如下：</p><ol><li>列表內容<ol start="2"><li>列表內容</li><li>列表內容</li></ol></li></ol><h4 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2. 无序列表"></a>2. 无序列表</h4><p>​ 语法：用 _ + * 任意一种都可以</p><p>​ 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>​ 效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>​ <code>列表是可以嵌套的！</code></p><h4 id="3-任务列表"><a href="#3-任务列表" class="headerlink" title="3. 任务列表"></a>3. 任务列表</h4><p>​ 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 围天安门跑三百圈</span><br><span class="line">- [x] 教学计划</span><br><span class="line">- [ ] 读一本书</span><br></pre></td></tr></table></figure><p>​ 效果展示：</p><ul><li><input disabled type="checkbox"> 围天安门跑三百圈</li><li><input checked disabled type="checkbox"> 教学计划</li><li><input disabled type="checkbox"> 读一本书</li></ul><hr><h3 id="2-4-引用"><a href="#2-4-引用" class="headerlink" title="2.4 引用"></a>2.4 引用</h3><p>​ 在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…</p><p>​ 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Typora热爱文字更佳，码农或者文字工作者必备神器</span><br><span class="line">&gt;&gt; 所見所得的Markdown編輯器</span><br><span class="line">&gt;&gt;&gt; 書寫即為美學！</span><br></pre></td></tr></table></figure><p>​ 效果如下：</p><blockquote><p>Typora热爱文字更佳，码农或者文字工作者必备神器</p><blockquote><p>所見所得的Markdown編輯器</p><blockquote><p>書寫即為美學！</p></blockquote></blockquote></blockquote><h3 id="2-5-图片"><a href="#2-5-图片" class="headerlink" title="2.5 图片"></a>2.5 图片</h3><p>​ 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>​ 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/c31f7fdc1bb4d377e6e11073240bdcfc.jpg)</span><br></pre></td></tr></table></figure><p>​ 效果如下：</p><p><img alt="图片" data-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/c31f7fdc1bb4d377e6e11073240bdcfc.jpg" class="lazyload"></p><h3 id="2-6-超链接"><a href="#2-6-超链接" class="headerlink" title="2.6 超链接"></a>2.6 超链接</h3><p>​ 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>​ 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure><p>​ 效果：</p><p>​ <a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br>​ <a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p><code>注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。</code></p><hr><h3 id="2-7-分割线"><a href="#2-7-分割线" class="headerlink" title="2.7 分割线"></a>2.7 分割线</h3><p>​ 三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">****</span><br><span class="line">---</span><br><span class="line">----</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><h3 id="2-8-表格"><a href="#2-8-表格" class="headerlink" title="2.8 表格"></a>2.8 表格</h3><p>表格是Markdown语法中比较复杂的一个，其语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">表头|条目一|条目二</span><br><span class="line">|:---:|:---:|:---:|</span><br><span class="line">|项目|项目一|项目二|</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">姓名|技能|排行</span><br><span class="line">|:--:|:--:|:--:|:</span><br><span class="line">|刘备|哭|大哥|</span><br><span class="line">|关羽|打|二哥|</span><br><span class="line">|张飞|骂|三弟|</span><br></pre></td></tr></table></figure><p>其效果如下：</p><table><thead><tr><th align="center">姓名</th><th align="center">技能</th><th align="center">排行</th></tr></thead><tbody><tr><td align="center">刘备</td><td align="center">哭</td><td align="center">大哥</td></tr><tr><td align="center">关羽</td><td align="center">打</td><td align="center">二哥</td></tr><tr><td align="center">张飞</td><td align="center">罵</td><td align="center">三弟</td></tr></tbody></table><p>​ <code>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中，文字默认居中。</code></p><hr><h3 id="2-9-代码块"><a href="#2-9-代码块" class="headerlink" title="2.9 代码块"></a>2.9 代码块</h3><ul><li><p>单行代码</p><p>语法：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`console.log(123456);`</span><br></pre></td></tr></table></figure><p>效果：</p><p><code>console.log(123456);</code></p></li><li><p>代码块</p><p>语法：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">​(```)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(```)javascript</span><br><span class="line">var txt = &quot;&quot;;</span><br><span class="line">var numbers = [45, 4, 9, 16, 25];</span><br><span class="line">  numbers.forEach(myFunction);</span><br><span class="line">function myFunction(value) &#123;</span><br><span class="line">   txt = txt + value + &quot;&lt;br&gt;; </span><br><span class="line">&#125;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的（）是为了防止转义，实际操作中没有括号</p></blockquote><p>效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">var</span> txt = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line">  numbers.forEach(myFunction);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  txt = txt + value + <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：代码高亮需要在开头的三个反引号后面写上选用哪种语言</code></p></li></ul><h3 id="2-10-反斜杠"><a href="#2-10-反斜杠" class="headerlink" title="2.10 反斜杠"></a>2.10 反斜杠</h3><blockquote><p>反斜杠相当于转义的作用，是一些符号以普通的符号显示出来</p></blockquote><p>Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><p><code>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</code></p><hr><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><blockquote><p>Markdown的一些高级用法，像数学公式、制图等，小伙伴儿们可以参考<a href="http://www.markdown.cn" target="_blank" rel="noopener">官网</a>的案例，我这里呢..就没必要去记了😂😂😂<br>Markdown对喜欢写作的小伙伴儿们来说是一门必备的技能。如果你希望快速掌握Markdown，很简单，动起来吧！</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Nov 25 2019 22:57:03 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Markdown基础语法&quot;&gt;&lt;a href=&quot;#Markdown基础语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown基础语法&quot;&gt;&lt;/a&gt;Markdown基础语法&lt;/h1&gt;&lt;hr&gt;&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;&lt;p&gt;Markdown 的特点就是，让写作变得更简单，我们不用再考虑如何排版，我们只要专心于写作就好了，其目标就是实现&lt;code&gt;「易读易写」&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.faithlch.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Markdown" scheme="http://www.faithlch.com/tags/Markdown/"/>
    
      <category term="语法" scheme="http://www.faithlch.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.faithlch.com/hello-world.html"/>
    <id>http://www.faithlch.com/hello-world.html</id>
    <published>2019-11-19T15:09:11.082Z</published>
    <updated>2019-07-03T11:10:57.620Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 22:57:03 GMT+0800 (中国标准时间) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Nov 25 2019 22:57:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我也不知道在写什么</title>
    <link href="http://www.faithlch.com/%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E5%9C%A8%E5%86%99%E4%BB%80%E4%B9%88.html"/>
    <id>http://www.faithlch.com/我也不知道在写什么.html</id>
    <published>2019-08-05T14:39:33.000Z</published>
    <updated>2019-08-05T15:00:41.979Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 22:57:04 GMT+0800 (中国标准时间) --><h3 id="Singleton与Static的区别"><a href="#Singleton与Static的区别" class="headerlink" title="Singleton与Static的区别"></a>Singleton与Static的区别</h3><h3 id="1-singleton"><a href="#1-singleton" class="headerlink" title="1. singleton"></a>1. singleton</h3><ul><li><p>单例模式</p><ul><li>单例模式，单例模式是一种被广泛使用的设计模式。指的是在应用整个生命周期内只能存在一个实例。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例。即一个类只有一个对象实例。</li></ul></li><li><p>单例模式的特点</p><ul><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其它对象提供这一实例。</li></ul></li><li><p>单例模式的好处</p><ul><li>使用单例模式可以限制对象实例的个数，除了返回实例的操作之外不能被new出来。这在某些需要限制对象访问的场合下是有用的。使用static的话并不能限制对象实例的个数。</li><li>在很多的操作中，比如说是<strong>建立目录、数据库操作</strong>等都需要这样的单线程操作。</li><li>最显而易见的好处是<strong>节约开销</strong>，比如数据库单例的好处是，每次你只需要去获取那个数据库的示例就好，不用每次都去创建一个实例。</li></ul></li></ul><h3 id="2-static"><a href="#2-static" class="headerlink" title="2. static"></a>2. static</h3><ul><li>静态类<ul><li>静态类就是一个类里面都是静态方法和静态field，构造器被private修饰，因此不能被实例化。Math类就是一个静态类。</li></ul></li><li>静态类的特点<ul><li>只包含静态成员。</li><li>无法进行实例化。也就是无法使用new运算符创建类类型的变量，因此可以通过<strong>类名.变量名</strong>直接引用，而不需要new出一个类来</li><li>静态方法通常用于创建实用程序函数。不能包含实例构造函数。静态方法的调用直接在类上进行，不能在类的实例上调用。</li><li>会进行密封，因此不能继承。 它们不能继承自任何类（除了Object）</li></ul></li><li>静态类的好处<ul><li>static类有更好的效率。</li><li>编译器可以进行检查。</li></ul></li></ul><h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h3><ul><li>静态方法只能直接访问本类中的静态成员（通过实例化对象）可以访问到的其它类中的所有成员（包括静态和非静态）</li><li>static有更好的访问效率，如果你的singleton不维持任何状态，仅仅是提供全局的访问，这个时候就适合用static，这样速度的也快；</li><li>静态类中只能有静态成员，不可以有非静态字段；</li><li>单例模式的<strong>灵活性更高</strong>，方法可以被<strong>override</strong>，因为静态类都是静态方法，所以不能被override；</li><li>单例模式会提供给你一个<strong>全局唯一的对象</strong>，静态类只是提供给你很多静态方法，这些方法不用创建对象，通过类就可以直接调用；</li><li>单例模式最大的好处就是节省内存空间，提高效率，因为他永远都只有一个实例！而static还是有可能被new出多个实例的，而这多个实例在用完之后也许就没用了，还要等待垃圾回收机制来回收，所以效率自然不如单例；</li><li>如果是一个非常重的对象，<strong>单例模式可以懒加载，静态类就无法做到</strong>；</li></ul><hr><p>什么是进程？**</p><ul><li>当一个程序开始运行时，它就是一个进程，进程包括运行中的程序和程序所使用到的内存和系统资源。而一个进程又是由多个线程所组成的。</li></ul><p><strong>什么是线程</strong></p><ul><li>线程是程序中的一个执行流，每个线程都有自己的专有寄存器(栈指针、程序计数器等)，但代码区是共享的，即不同的线程可以执行同样的函数。</li></ul><p><strong>什么是多线程？</strong></p><ul><li>多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</li></ul><p><strong>多线程的好处：</strong></p><ul><li>可以提高CPU的利用率。在多线程程序中，一个线程必须等待的时候，CPU可以运行其它的线程而不是等待，这样就大大提高了程序的效率。</li></ul><p><strong>多线程的不利方面：</strong></p><ul><li>线程也是程序，所以线程需要占用内存，线程越多占用内存也越多；</li><li>多线程需要协调和管理，所以需要CPU时间跟踪线程；</li><li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；</li><li>线程太多会导致控制太复杂，最终可能造成很多Bug。</li></ul><hr><p>参考链接：<a href="https://www.cnblogs.com/scotth/p/10450891.html" target="_blank" rel="noopener">https://www.cnblogs.com/scotth/p/10450891.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 22:57:04 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;Singleton与Static的区别&quot;&gt;&lt;a href=&quot;#Singleton与Static的区别&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="我也很绝望..." scheme="http://www.faithlch.com/categories/%E6%88%91%E4%B9%9F%E5%BE%88%E7%BB%9D%E6%9C%9B/"/>
    
    
      <category term="singleton" scheme="http://www.faithlch.com/tags/singleton/"/>
    
      <category term="static" scheme="http://www.faithlch.com/tags/static/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面试题收藏（持续更新中...）</title>
    <link href="http://www.faithlch.com/JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E8%97%8F.html"/>
    <id>http://www.faithlch.com/JavaScript面试题收藏.html</id>
    <published>2019-07-25T02:27:50.000Z</published>
    <updated>2019-11-24T02:19:47.098Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 22:57:04 GMT+0800 (中国标准时间) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文仅记录平时学习过程中遇到的知识点，只实现了相应方法的核心原理，部分边界细节并未处理。为了防止日后遗忘，特此记录，方便日后记忆，学习之用！</p></blockquote><h3 id="1-实现一个call函数"><a href="#1-实现一个call函数" class="headerlink" title="1.  实现一个call函数"></a>1. 实现一个call函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将要改变this指向的方法挂到目标this上执行并返回</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'not funciton'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...arg)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实现一个apply函数"><a href="#2-实现一个apply函数" class="headerlink" title="2.  实现一个apply函数"></a>2. 实现一个apply函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'not funciton'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现一个bind函数"><a href="#3-实现一个bind函数" class="headerlink" title="3.  实现一个bind函数"></a>3. 实现一个bind函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Error'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理函数使用new的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> _this(...arg, ...arguments)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _this.apply(context, arg.concat(...arguments))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-instanceof的原理"><a href="#4-instanceof的原理" class="headerlink" title="4.  instanceof的原理"></a>4. instanceof的原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右边变量的原型存在于左边变量的原型链上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instanceOf</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> leftValue = left.__proto__</span><br><span class="line">  <span class="keyword">let</span> rightValue = right.prototype</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === right) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    leftValue = rightValue.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Object-create的基本实现原理"><a href="#5-Object-create的基本实现原理" class="headerlink" title="5.  Object.create的基本实现原理"></a>5. Object.create的基本实现原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br></pre></td></tr></table></figure><h3 id="6-new本质"><a href="#6-new本质" class="headerlink" title="6.  new本质"></a>6. new本质</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span> (<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个新对象且将其隐式原型指向构造函数原型</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      __proto__ : fun.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行构造函数</span></span><br><span class="line">    fun.call(obj, ...arguments)</span><br><span class="line">    <span class="comment">// 返回该对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = myNew(person)(<span class="string">'chen'</span>, <span class="number">18</span>) <span class="comment">// &#123;name: "chen", age: 18&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-实现一个基本的Promise"><a href="#7-实现一个基本的Promise" class="headerlink" title="7.  实现一个基本的Promise"></a>7. 实现一个基本的Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①自动执行函数，②三个状态，③then</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (fn) &#123;</span><br><span class="line">    <span class="comment">// 三个状态</span></span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'pending'</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span></span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span></span><br><span class="line">        <span class="keyword">this</span>.reason = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自动执行函数</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fn(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// then</span></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.state) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'fulfilled'</span>:</span><br><span class="line">        onFulfilled()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rejected'</span>:</span><br><span class="line">        onRejected()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-实现浅拷贝"><a href="#8-实现浅拷贝" class="headerlink" title="8.  实现浅拷贝"></a>8. 实现浅拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. ...实现</span></span><br><span class="line"><span class="keyword">let</span> copy1 = &#123;...&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.assign实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> copy2 = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="9-实现一个基本的深拷贝"><a href="#9-实现一个基本的深拷贝" class="headerlink" title="9.  实现一个基本的深拷贝"></a>9. 实现一个基本的深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. JOSN.stringify()/JSON.parse()</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">x</span>: <span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 递归拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> copy = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">      copy[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span> ? deepClone(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-使用setTimeout模拟setInterval"><a href="#10-使用setTimeout模拟setInterval" class="headerlink" title="10.  使用setTimeout模拟setInterval"></a>10. 使用setTimeout模拟setInterval</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span></span><br><span class="line">setTimeout (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  setTimeout (<span class="built_in">arguments</span>.callee, <span class="number">500</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><h3 id="11-js实现一个继承方法-借用构造函数继承实例属性"><a href="#11-js实现一个继承方法-借用构造函数继承实例属性" class="headerlink" title="11.  js实现一个继承方法// 借用构造函数继承实例属性"></a>11. js实现一个继承方法// 借用构造函数继承实例属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寄生继承原型属性</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> Super = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Super.prototype = Parent.prototype</span><br><span class="line">  Child.prototype = <span class="keyword">new</span> Super()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="12-实现一个基本的Event-Bus"><a href="#12-实现一个基本的Event-Bus" class="headerlink" title="12. 实现一个基本的Event Bus"></a>12. 实现一个基本的Event Bus</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件通信，一个触发与监听的过程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 存储事件</span></span><br><span class="line">    <span class="keyword">this</span>.events = <span class="keyword">this</span>.events || <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听事件</span></span><br><span class="line">  addListener (type, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events.get(type)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events.set(type, fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emit (type) &#123;</span><br><span class="line">    <span class="keyword">let</span> handle = <span class="keyword">this</span>.events.get(type)</span><br><span class="line">    handle.apply(<span class="keyword">this</span>, [...arguments].slice(<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> emitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.addListener(<span class="string">'ages'</span>, age =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">emitter.emit(<span class="string">'ages'</span>, <span class="number">18</span>)  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="13-实现一个双向数据绑定"><a href="#13-实现一个双向数据绑定" class="headerlink" title="13. 实现一个双向数据绑定"></a>13. 实现一个双向数据绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>)</span><br><span class="line"><span class="keyword">let</span> span = <span class="built_in">document</span>.getElementById(<span class="string">'span'</span>)</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'text'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'获取数据了'</span>)</span><br><span class="line">    <span class="keyword">return</span> obj.text</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新了'</span>)</span><br><span class="line">    input.value = newVal</span><br><span class="line">    span.innerHTML = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">input.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.text = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="14-实现一个简单路由"><a href="#14-实现一个简单路由" class="headerlink" title="14. 实现一个简单路由"></a>14. 实现一个简单路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="comment">// 路由存储对象</span></span><br><span class="line">    <span class="keyword">this</span>.routes = &#123;&#125;</span><br><span class="line">    <span class="comment">// 当前hash</span></span><br><span class="line">    <span class="keyword">this</span>.currentHash = <span class="string">''</span></span><br><span class="line">    <span class="comment">// 绑定this，避免监听时this指向改变</span></span><br><span class="line">    <span class="keyword">this</span>.freshRoute = <span class="keyword">this</span>.freshRoute.bind(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="keyword">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="keyword">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存储</span></span><br><span class="line">  storeRoute (path, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.routes[path] = cb || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  freshRoute () &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentHash = location.hash.slice(<span class="number">1</span>) || <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">this</span>.routes[<span class="keyword">this</span>.currentHash]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-实现懒加载"><a href="#15-实现懒加载" class="headerlink" title="15. 实现懒加载"></a>15. 实现懒加载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/1.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/2.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/3.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/4.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/5.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/6.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/7.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/8.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/9.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./imgs/default.png"</span> <span class="attr">data</span>=<span class="string">"./imgs/10.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgs =  <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>)</span><br><span class="line"><span class="comment">// 可视区高度</span></span><br><span class="line"><span class="keyword">let</span> clientHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 滚动卷去的高度</span></span><br><span class="line">  <span class="keyword">let</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i ++) &#123;</span><br><span class="line">    <span class="comment">// 得到图片顶部距离可视区顶部的距离</span></span><br><span class="line">    <span class="keyword">let</span> x = clientHeight + scrollTop - imgs[i].offsetTop</span><br><span class="line">    <span class="comment">// 图片在可视区内</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; clientHeight+imgs[i].height) &#123;</span><br><span class="line">      imgs[i].src = imgs[i].getAttribute(<span class="string">'data'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(lazyLoad, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="16-rem实现原理"><a href="#16-rem实现原理" class="headerlink" title="16. rem实现原理"></a>16. rem实现原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> doc = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="keyword">let</span> width = doc.getBoundingClientRect().width</span><br><span class="line">  <span class="comment">// 假设设计稿为宽750，则rem为10px</span></span><br><span class="line">  <span class="keyword">let</span> rem = width / <span class="number">75</span></span><br><span class="line">  doc.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-手写实现AJAX"><a href="#17-手写实现AJAX" class="headerlink" title="17. 手写实现AJAX"></a>17. 手写实现AJAX</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 简单实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.send(data)</span><br><span class="line"><span class="comment">// 设置状态变化回调处理请求结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyStatus === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 基于promise实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请求地址</span></span><br><span class="line">  <span class="keyword">const</span> url = options.url</span><br><span class="line">  <span class="comment">// 请求方法</span></span><br><span class="line">  <span class="keyword">const</span> method = options.method.toLocaleLowerCase() || <span class="string">'get'</span></span><br><span class="line">  <span class="comment">// 默认为异步true</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">async</span> = options.async</span><br><span class="line">  <span class="comment">// 请求参数</span></span><br><span class="line">  <span class="keyword">const</span> data = options.data</span><br><span class="line">  <span class="comment">// 实例化</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 请求超时</span></span><br><span class="line">  <span class="keyword">if</span> (options.timeout &amp;&amp; options.timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    xhr.timeout = options.timeout</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个Promise实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    xhr.ontimeout = <span class="function"><span class="params">()</span> =&gt;</span> reject &amp;&amp; reject(<span class="string">'请求超时'</span>)</span><br><span class="line">    <span class="comment">// 监听状态变化回调</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 200-300 之间表示请求成功，304资源未变，取缓存</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">          resolve &amp;&amp; resolve(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject &amp;&amp; reject()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 错误回调</span></span><br><span class="line">    xhr.onerror = <span class="function"><span class="params">err</span> =&gt;</span> reject &amp;&amp; reject(err)</span><br><span class="line">    <span class="keyword">let</span> paramArr = []</span><br><span class="line">    <span class="keyword">let</span> encodeData</span><br><span class="line">    <span class="comment">// 处理请求参数</span></span><br><span class="line">    <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="comment">// 参数拼接需要通过 encodeURIComponent 进行编码</span></span><br><span class="line">        paramArr.push(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[key]))</span><br><span class="line">      &#125;</span><br><span class="line">      encodeData = paramArr.join(<span class="string">'&amp;'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get请求拼接参数</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'get'</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测url中是否已存在 ? 及其位置</span></span><br><span class="line">      <span class="keyword">const</span> index = url.indexOf(<span class="string">'?'</span>)</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">-1</span>) url += <span class="string">'?'</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (index !== url.length <span class="number">-1</span>) url += <span class="string">'&amp;'</span></span><br><span class="line">      <span class="comment">// 拼接url</span></span><br><span class="line">      url += encodeData</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'get'</span>) xhr.send(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// post 方式需要设置请求头</span></span><br><span class="line">      xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>)</span><br><span class="line">      xhr.send(encodeData)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-实现拖拽"><a href="#18-实现拖拽" class="headerlink" title="18. 实现拖拽"></a>18. 实现拖拽</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// drag处于绝对定位状态</span></span><br><span class="line">  <span class="keyword">let</span> drag = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line">  drag.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event</span><br><span class="line">    <span class="comment">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span></span><br><span class="line">    <span class="keyword">let</span> diffX = e.clientX - drag.offsetLeft</span><br><span class="line">    <span class="keyword">let</span> diffY = e.clientY - drag.offsetTop</span><br><span class="line">    drag.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span></span><br><span class="line">      <span class="keyword">let</span> left = e.clientX - diffX</span><br><span class="line">      <span class="keyword">let</span> top = e.clientY - diffY</span><br><span class="line">      <span class="comment">// 避免拖拽出可视区</span></span><br><span class="line">      <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="built_in">window</span>.innerWidth - drag.offsetWidth) &#123;</span><br><span class="line">        left = <span class="built_in">window</span>.innerWidth - drag.offsetWidth</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        top = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt; <span class="built_in">window</span>.innerHeight - drag.offsetHeight) &#123;</span><br><span class="line">        top = <span class="built_in">window</span>.innerHeight - drag.offsetHeight</span><br><span class="line">      &#125;</span><br><span class="line">      drag.style.left = left + <span class="string">'px'</span></span><br><span class="line">      drag.style.top = top + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line">    drag.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.onmousemove = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">this</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-实现一个节流函数"><a href="#19-实现一个节流函数" class="headerlink" title="19. 实现一个节流函数"></a>19. 实现一个节流函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 利用闭包保存时间</span></span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">      fn.apply(context, arg)</span><br><span class="line">      prev = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'节流'</span>)</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="string">'scroll'</span>, throttle(fn, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h3 id="20-实现一个防抖函数"><a href="#20-实现一个防抖函数" class="headerlink" title="20. 实现一个防抖函数"></a>20. 实现一个防抖函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, delay</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 利用闭包保存定时器  </span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>    </span><br><span class="line">        <span class="keyword">let</span> arg = <span class="built_in">arguments</span>    </span><br><span class="line">        <span class="comment">// 在规定时间内再次触发会先清除定时器后再重设定时器    </span></span><br><span class="line">        clearTimeout(timer)    </span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      </span><br><span class="line">            fn.apply(context, arg)    </span><br><span class="line">        &#125;, delay)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'防抖'</span>)</span><br><span class="line">&#125;addEventListener(<span class="string">'scroll'</span>, debounce(fn, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>后续也会持续更新，希望能对所有像我一样的前端新手都有所帮助。共同进步~</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      记录平时遇到的JavaScript原理题，便于日后记忆研究，以备不时之需...
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.faithlch.com/categories/JavaScript/"/>
    
    
      <category term="-JavaScript -面试题" scheme="http://www.faithlch.com/tags/JavaScript-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Coding Pages申请SSL/TLS证书错误</title>
    <link href="http://www.faithlch.com/Coding-Pages%E7%94%B3%E8%AF%B7SSL-TLS%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF.html"/>
    <id>http://www.faithlch.com/Coding-Pages申请SSL-TLS证书错误.html</id>
    <published>2019-07-12T07:19:58.000Z</published>
    <updated>2019-07-17T13:40:30.342Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 22:57:04 GMT+0800 (中国标准时间) --><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天由于某种原因，我将我的个人站点部署到了Coding Pages上面，需要申请SSL/TLS证书，但是当我登陆进入Coding Pages服务的后台并点击申请证书时，竟然报错了！！！</p><p>我重新点了申请，几秒后依然报错，并提示我半小时只能申请一次。我查看了下报错的提示信息，如下：</p><blockquote><p><a href="urn:acme:error:unauthorized:Invalid" target="_blank" rel="noopener">urn:acme:error:unauthorized:Invalid</a> response from <a href="http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" target="_blank" rel="noopener">http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</a>: xxxxxxxxx</p></blockquote><p>好吧，本着有事就问度娘的一贯风格，百度了一下，发现了Coding Pages的官方文件：<a href="https://coding.net/help/faq/pages/coding-pages-faq.html" target="_blank" rel="noopener">Coding Pages 常见问题</a></p><p>这时候按照官方文件的指引，找到了和我差不多一样的错误信息的解决方案：</p><blockquote><p>错误原因：无法获取正确的域名验证信息<br>解决方式1：检查 DNS 的 CNAME 记录是否设置正确，静态 Pages 为 pages.coding.me，动态 Pages 为 pages.coding.io<br>解决方式2：检查域名的 DNS 是否将海外线路解析到 Coding Pages 的服务器</p></blockquote><p>因为Coding Pages的静态Pages是免费的，而动态Pages是收费的，对于用Hexo搭建的静态站点，自然是选择免费的静态Pages服务就足够了。</p><p>于是解决方式1对我来说就不存在了，接着联想到之前我对部署在GitHub Pages上的个人站点进行了自定义域名绑定+域名解析设置，有些豁然开朗的感觉。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由于考虑到站点访问速度，以及后期SEO的各种问题，因此我的个人站点是同时部署到GitHub Pages和Coding Pages上的，接着在腾讯云域名解析里进行了配置：默认的解析线路将我的域名指向<code>pages.coding.me</code>，国外的解析路线则是指向了<code>xxx.github.io</code>。</p><p>之所以这样配置，是因为国内部分地区无法直接访问GitHub，自然就无法访问我部署在GitHub上的个人站点，于是我又选择了Coding.net的Pages服务，这样国内用户就可以快速访问到我部署在Coding Pages的个人站点，而国外用户则是快速访问到GitHub Pages上的个人站点。</p><p>问题就出现在这里，因为我第一次申请SSL/TLS证书的时候，还没有解析境外的线路，所以很快就申请成功了。后来添加了国外线路的解析，这导致在Coding Pages的后台申请证书时无法通过验证，自然就申请失败了。</p><p>分析到这里，我也基本知道怎么解决这个错误了。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>由于我是在腾讯云购买的域名，于是登陆到腾讯云域名解析的后台系统，打开个人域名的解析设置，<strong>暂停对于境外线路的解析</strong>。这里暂停就行了，一般来说大概需要5分钟左右的生效时间，毕竟DNS解析是存在缓存的。</p><p>五分钟后，我又进入Coding Pages服务的后台，再一次申请SSL/TLS证书，果不其然，几秒钟后我申请证书成功了。</p><p>最后，再次返回腾讯云域名解析的后台，将境外解析的线路再次启用，嗯，完美！！！</p><h3 id="其他的申请错误"><a href="#其他的申请错误" class="headerlink" title="其他的申请错误"></a>其他的申请错误</h3><p>个人暂时就遇到这一个问题，有其他问题的伙伴可自行查阅官方文件<a href="https://coding.net/help/faq/pages/coding-pages-faq.html" target="_blank" rel="noopener">Coding Pages 常见问题</a>。</p><hr><p>明日<a href="https://www.bilibili.com/bangumi/play/ep277090?spm_id_from=333.334.b_63686965665f7265636f6d6d656e64.7" target="_blank" rel="noopener">灵笼</a>上线，喜欢的小伙伴一起啊~~</p><p><img alt="重磅来袭" data-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/%E7%81%B5%E7%AC%BC.jpg" class="lazyload"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li>Coding Pages的官方文件：<a href="https://coding.net/help/faq/pages/coding-pages-faq.html" target="_blank" rel="noopener">Coding Pages 常见问题</a></li><li><a href="https://www.cnblogs.com/yulinlewis/p/9595362.html" target="_blank" rel="noopener">https://www.cnblogs.com/yulinlewis/p/9595362.html</a></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      境外域名解析，SSL/TLS证书申请错误问题
    
    </summary>
    
      <category term="踩坑记录" scheme="http://www.faithlch.com/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="hexo" scheme="http://www.faithlch.com/tags/hexo/"/>
    
      <category term="SSL/TLS" scheme="http://www.faithlch.com/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博文</title>
    <link href="http://www.faithlch.com/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87.html"/>
    <id>http://www.faithlch.com/我的第一篇博文.html</id>
    <published>2019-07-01T13:55:04.000Z</published>
    <updated>2019-07-12T10:01:18.788Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 22:57:03 GMT+0800 (中国标准时间) --><h2 id="新手写博客应该写些什么"><a href="#新手写博客应该写些什么" class="headerlink" title="新手写博客应该写些什么~"></a>新手写博客应该写些什么~</h2><p>最近刚搭建了这么个博客，奈何自己也是前端小白一枚，苦于不知道该写什么比较好。于是乎，各种问<a href="[https://www.baidu.com](https://www.baidu.com/)">度娘</a>，借鉴各种大神的作品，最终总结出如下适合自己目前状况的一种套路：</p><blockquote><p><strong><code>内容为王，拒绝copy</code></strong></p><p><strong><code>一路坚持，总有收获</code></strong></p></blockquote><a id="more"></a><p><img alt="你好啊" data-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/%E4%B8%8B%E8%BD%BD.jpg" class="lazyload"></p><hr><h2 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h2><h3 id="入门系列"><a href="#入门系列" class="headerlink" title="入门系列"></a>入门系列</h3><ol><li><blockquote><p>备忘录</p></blockquote><p>主要记录平时自己常用到的，容易忽视的一些知识，作为自己<strong>知识的巩固</strong>，也可以写自己收藏的比较好的网站，文章的分享等等，当然也可以写自己最近的<strong>计划</strong>之类的。</p></li><li><blockquote><p>学习笔记</p></blockquote><p>这一块可以写的东西好多，只要是自己平时get到的技能点，都可以写上去。</p><ul><li>读书笔记</li><li>基础理解</li><li>学习心得</li></ul></li><li><blockquote><p>踩坑记录</p></blockquote><p>自己工作中，学习中遇到的各种坑，你可以记录下来，总不能下次遇见在此掉进里面吧…，如果恰巧能帮助到别人一下下，那可是功德一件啊~</p></li><li><blockquote><p>生活随笔</p></blockquote><p>个人日记什么的，自己个人呢有点想写，但怎么感觉有点怪怪的…</p><p>还是觉得，自己的小本本写着比较安心…</p><p><code>想写在自己博客的话，文章也是可以加密的！</code></p></li></ol><h3 id="实战类"><a href="#实战类" class="headerlink" title="实战类"></a>实战类</h3><ol><li><blockquote><p>环境搭建</p></blockquote></li><li><blockquote><p>操作记录</p></blockquote><p><code>主要写一些实战中，某些环境的搭建过程，操作步骤等</code></p><hr></li></ol><h4 id="不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如："><a href="#不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如：" class="headerlink" title="不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如："></a>不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如：</h4><blockquote><blockquote><p>模式的提炼</p></blockquote><blockquote><p>造轮子，各种可复用的组件等</p></blockquote><blockquote><p>各种工具的使用，源码分析</p></blockquote><blockquote><p>开源项目</p></blockquote></blockquote><p><img alt="走你" data-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/2227.jpg" class="lazyload"></p><hr><p><strong>和大家一样，我也是刚刚开始，记录以上内容，希望能一起进步。</strong></p><p><strong>路漫漫其修远兮，吾将上下而求索！</strong></p><p><strong>坚持就是胜利，一起加油呀！</strong></p><p><strong>共勉~</strong></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>B站优质up主：<a href="https://www.bilibili.com/video/av56930990?from=search&seid=10919128542170066121" target="_blank" rel="noopener">CodeSheep</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      路漫漫其修远兮，吾将上下而求索！
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.faithlch.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="blog" scheme="http://www.faithlch.com/tags/blog/"/>
    
  </entry>
  
</feed>
