<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019 料你也不想再过一次</title>
    <url>/2019-%E6%96%99%E4%BD%A0%E4%B9%9F%E4%B8%8D%E6%83%B3%E5%86%8D%E8%BF%87%E4%B8%80%E6%AC%A1.html</url>
    <content><![CDATA[
    <div id="aplayer-TjjcBbvV" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="574919767" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="auto" data-theme="#a672b5" data-volume="0.2" data-loop="all"
    ></div>
<h3 id="2019-料你也不想再过一次"><a href="#2019-料你也不想再过一次" class="headerlink" title="2019 料你也不想再过一次"></a>2019 料你也不想再过一次</h3><hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>在我们为2020跨年而狂欢的时候，不知道还记不记得2019年初立的flag。第一批90后已经步入了三十岁的乐园😔，我们也该不远了!</p>
<p>我觉得在2020来临之际，应该静下心来想想，从毕业到进入社会这么些年来，自己到底真正做了多少有意义的事？有多少的时间是用来提升自己，努力成长的，又有多少的时间是用来挥霍、虚度的。</p>
<p>存款多少？或者欠款多少？一年到头，看着当初立里的flag，可能四分之一都没有完成的时候，或许自己应该是提不起来什么兴致跨年狂欢…</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/2020.png" alt="life"></p>
<h3 id="2019回顾"><a href="#2019回顾" class="headerlink" title="2019回顾"></a>2019回顾</h3><blockquote>
<p>对我而言，2019依然很平淡，并没有月薪过万，依然没有存款，但不容置疑这是2017-2019这三年以来最好的一年了。从西安到北京，再到天津，一路坎坷，但总归有了好转的苗头，虽然与心中预期的相差甚远，但正在路上，虽然缓慢，但一切都在往好的方向发展……</p>
</blockquote>
<h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><p>17年毕业，选了一条之前自己从未做过、也没想过的路，“程序员”—-这个折腾了我一年多的职业。</p>
<p>在这之前毫无编程基础，掉头转战IT。刚毕业的我，身无分文，带着一张信用卡就孤身一人去了北京，进了培训班（此处省略一万字…）。</p>
<p>那段时间是我最难熬时候，每个月房租、花呗、信用卡、学费，得支出好一大笔钱，然而零收入(应该是负收入…)的我是怎么度过来的，这些不想再提，但期间资助过我的人，会牢记在心里，来日必当重谢！<br>但凡经历过的，都不会是平白无故，总会让你有所成长，特别是在牵扯到钱的时候，会让你合理的清理朋友圈，我觉得的这是个好现象！</p>
<p>2019三月份离职，折腾了两个来月，也没什么起色，一度的以为自己就是天煞孤星啊，又恰逢互联网寒冬，内心的火好像就要被这寒风吹灭了…</p>
<p>七月份，不甘的离开北京，来到了天津，她的城市，当时的我不知道内心是忧还是喜。幸好，有公司愿意接纳我，我呢也就这么迷迷糊糊的去了。奈何公司技术栈是微软全家桶😔，Blazor、WPF、WinForm、Xamarin.Forms一大堆，两个字总结我当时的心情 — — 卧槽！怎么办呢，学呗。怎么学呢？啃官网呗，我×××……，只能说网上找点新文章，教程真的好难😭</p>
<p>好好的一前端(虽然很菜…)，莫名其妙搞.NET总感觉很别扭。尽管微软真的很厉害，尽管东西是好东西，但直到今天还是心心念念我的vue/react，想学的Flutter还是没来得及学。<br>搞得我精神恍惚，这种身在曹营心在汉的境地让我很是不舒服！</p>
<p>工作虽不顺利，但至少后半年有了起色，唯一能让我欣慰的大概就是还清了我北京的学费吧。希望2020年，一路向前！</p>
<h4 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h4><p>很难想象像我这种情况还有女生愿意陪着我，一直很感激！❤❤❤</p>
<p>这一年，只能说时运不济，在我最没资格谈情说爱的时间，却留了你一席之地，也许注定就会是个悲剧吧。</p>
<p>没有预料中的跨年计划，没有任何的仪式感，当心中所预计的，看着一点点的变得不可能，我觉得强颜欢笑是件很难的事……</p>
<p>给我的教训，当你连你自己都养不活的时候，别想那些没用的，努力让自己变得有钱才是正道！！</p>
<h3 id="2020展望"><a href="#2020展望" class="headerlink" title="2020展望"></a>2020展望</h3><blockquote>
<p>展望不展望的倒不是很重要，关键是2020年第一天，不能显得太孤立，总得融入一下潮流嘛！Flag就暂时先不立了，因为打脸总会来的太快…</p>
<p>感情方面，就希望我们能有一个好的结局吧，不管是好聚好散，还是修成成果，我们都能笑脸相迎，坦然面对…</p>
<p>工作上，就祝我不在重复2019年的状态，不忘初心，一路前行！</p>
<p>最后的最后，祝她越来越优秀，变成自己心中理想的模样！</p>
</blockquote>
<hr>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/%E5%A5%B3%E7%94%9F%E7%99%BD%E8%89%B2%E8%A1%AC%E8%A1%AB4k.jpg" alt="2020"></p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS技巧(一)之隐藏滚动条</title>
    <url>/CSS%E6%8A%80%E5%B7%A7-%E4%B8%80-%E4%B9%8B%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1.html</url>
    <content><![CDATA[<h1 id="CSS实现隐藏滚动条的同时还可以滚动的三种方式"><a href="#CSS实现隐藏滚动条的同时还可以滚动的三种方式" class="headerlink" title="CSS实现隐藏滚动条的同时还可以滚动的三种方式"></a>CSS实现隐藏滚动条的同时还可以滚动的三种方式</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><blockquote>
<p>平时会遇到很多有关CSS的特殊用法以及技巧，等哪天自己有用到了，就找不到是在哪儿见过，所以在此单独做一分类，专门将它们收藏在一起，方便自己日后翻阅调用…</p>
</blockquote>
<h3 id="1-1-关于该篇"><a href="#1-1-关于该篇" class="headerlink" title="1.1 关于该篇"></a>1.1 关于该篇</h3><blockquote>
<p>该篇总结了纯CSS实现隐藏滚动条的同时又能保持滚动的几种方法，以下三种方法感觉很不错</p>
</blockquote>
<h2 id="2-方法一："><a href="#2-方法一：" class="headerlink" title="2. 方法一："></a>2. 方法一：</h2><h3 id="通过-webkit-scrollbar-伪元素"><a href="#通过-webkit-scrollbar-伪元素" class="headerlink" title="通过  ::-webkit-scrollbar 伪元素"></a>通过  ::-webkit-scrollbar 伪元素</h3><blockquote>
<p>简单粗暴，但是兼容性不好，不兼容IE</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//<span class="selector-tag">chrome</span> 和<span class="selector-tag">Safari</span></span><br><span class="line"><span class="selector-class">.inner-container</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">    display: none;//width:0 !impotant;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> //<span class="selector-tag">IE</span> 10+</span><br><span class="line"><span class="selector-class">.inner-container</span> &#123; <span class="attribute">-ms-overflow-style</span>: none; &#125;</span><br><span class="line"></span><br><span class="line"> //<span class="selector-tag">Firefox</span></span><br><span class="line"><span class="selector-class">.inner-container</span> &#123; <span class="attribute">overflow</span>: -moz-scrollbars-none; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-方法二："><a href="#3-方法二：" class="headerlink" title="3. 方法二："></a>3. 方法二：</h2><h3 id="外层元素-overflow-hidden，-内层元素absolute定位"><a href="#外层元素-overflow-hidden，-内层元素absolute定位" class="headerlink" title="外层元素 overflow: hidden， 内层元素absolute定位"></a>外层元素 overflow: hidden， 内层元素absolute定位</h3><blockquote>
<p>兼容性较好，绝对布局不用计算滚动条宽度</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-tag">CSS</span> 样式</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.element</span>, <span class="selector-class">.outer-container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.outer-container</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.inner-container</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">        <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line">// <span class="selector-tag">html</span> 结构</span><br><span class="line">&lt;div class=&quot;outer-container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner-container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;element&quot;&gt;</span><br><span class="line">            <span class="selector-tag">Lorem</span> <span class="selector-tag">ipsum</span> <span class="selector-tag">dolor</span> <span class="selector-tag">sit</span> <span class="selector-tag">amet</span>, <span class="selector-tag">consectetur</span> <span class="selector-tag">adipiscing</span> <span class="selector-tag">elit</span>.</span><br><span class="line">            ...</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="4-方法三："><a href="#4-方法三：" class="headerlink" title="4. 方法三："></a>4. 方法三：</h2><h3 id="父元素overflow-hidden-子元素宽度-100-滚动条宽度"><a href="#父元素overflow-hidden-子元素宽度-100-滚动条宽度" class="headerlink" title="父元素overflow: hidden, 子元素宽度 100% + 滚动条宽度"></a>父元素overflow: hidden, 子元素宽度 100% + 滚动条宽度</h3><blockquote>
<p>兼容性好，但是需要计算滚动条的宽度    </p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// CSS 样式</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        width: calc(100% + 17px);</span><br><span class="line">        overflow: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// html 结构</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ul>
<li>以上三种方法其实都很好。方法一好像用过几次，虽然不兼容万恶的IE，但感觉真挺爽的。</li>
</ul>
<blockquote>
<p>该类型的文章篇幅基本都会很小，但是数量会很多，以后会不定期的更新，统一放在《CSS技巧》这一分类中。平时的工作、学习中随时遇到随时记，虽然是很小的知识点，但积少成多，终有一日会水滴石穿~</p>
</blockquote>
]]></content>
      <categories>
        <category>大前端</category>
        <category>CSS</category>
        <category>CSS技巧收录</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Coding Pages申请SSL/TLS证书错误</title>
    <url>/Coding-Pages%E7%94%B3%E8%AF%B7SSL-TLS%E8%AF%81%E4%B9%A6%E9%94%99%E8%AF%AF.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天由于某种原因，我将我的个人站点部署到了Coding Pages上面，需要申请SSL/TLS证书，但是当我登陆进入Coding Pages服务的后台并点击申请证书时，竟然报错了！！！</p>
<p>我重新点了申请，几秒后依然报错，并提示我半小时只能申请一次。我查看了下报错的提示信息，如下：</p>
<blockquote>
<p><a href="urn:acme:error:unauthorized:Invalid">urn:acme:error:unauthorized:Invalid</a> response from <a href="http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx">http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</a>: xxxxxxxxx</p>
</blockquote>
<p>好吧，本着有事就问度娘的一贯风格，百度了一下，发现了Coding Pages的官方文件：<a href="https://coding.net/help/faq/pages/coding-pages-faq.html">Coding Pages 常见问题</a></p>
<p>这时候按照官方文件的指引，找到了和我差不多一样的错误信息的解决方案：</p>
<blockquote>
<p>错误原因：无法获取正确的域名验证信息<br>解决方式1：检查 DNS 的 CNAME 记录是否设置正确，静态 Pages 为 pages.coding.me，动态 Pages 为 pages.coding.io<br>解决方式2：检查域名的 DNS 是否将海外线路解析到 Coding Pages 的服务器</p>
</blockquote>
<p>因为Coding Pages的静态Pages是免费的，而动态Pages是收费的，对于用Hexo搭建的静态站点，自然是选择免费的静态Pages服务就足够了。</p>
<p>于是解决方式1对我来说就不存在了，接着联想到之前我对部署在GitHub Pages上的个人站点进行了自定义域名绑定+域名解析设置，有些豁然开朗的感觉。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由于考虑到站点访问速度，以及后期SEO的各种问题，因此我的个人站点是同时部署到GitHub Pages和Coding Pages上的，接着在腾讯云域名解析里进行了配置：默认的解析线路将我的域名指向<code>pages.coding.me</code>，国外的解析路线则是指向了<code>xxx.github.io</code>。</p>
<p>之所以这样配置，是因为国内部分地区无法直接访问GitHub，自然就无法访问我部署在GitHub上的个人站点，于是我又选择了Coding.net的Pages服务，这样国内用户就可以快速访问到我部署在Coding Pages的个人站点，而国外用户则是快速访问到GitHub Pages上的个人站点。</p>
<p>问题就出现在这里，因为我第一次申请SSL/TLS证书的时候，还没有解析境外的线路，所以很快就申请成功了。后来添加了国外线路的解析，这导致在Coding Pages的后台申请证书时无法通过验证，自然就申请失败了。</p>
<p>分析到这里，我也基本知道怎么解决这个错误了。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>由于我是在腾讯云购买的域名，于是登陆到腾讯云域名解析的后台系统，打开个人域名的解析设置，<strong>暂停对于境外线路的解析</strong>。这里暂停就行了，一般来说大概需要5分钟左右的生效时间，毕竟DNS解析是存在缓存的。</p>
<p>五分钟后，我又进入Coding Pages服务的后台，再一次申请SSL/TLS证书，果不其然，几秒钟后我申请证书成功了。</p>
<p>最后，再次返回腾讯云域名解析的后台，将境外解析的线路再次启用，嗯，完美！！！</p>
<h3 id="其他的申请错误"><a href="#其他的申请错误" class="headerlink" title="其他的申请错误"></a>其他的申请错误</h3><p>个人暂时就遇到这一个问题，有其他问题的伙伴可自行查阅官方文件<a href="https://coding.net/help/faq/pages/coding-pages-faq.html">Coding Pages 常见问题</a>。</p>
<hr>
<p>明日<a href="https://www.bilibili.com/bangumi/play/ep277090?spm_id_from=333.334.b_63686965665f7265636f6d6d656e64.7">灵笼</a>上线，喜欢的小伙伴一起啊~~</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/%E7%81%B5%E7%AC%BC.jpg" alt="重磅来袭"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li>Coding Pages的官方文件：<a href="https://coding.net/help/faq/pages/coding-pages-faq.html">Coding Pages 常见问题</a></li>
<li><a href="https://www.cnblogs.com/yulinlewis/p/9595362.html">https://www.cnblogs.com/yulinlewis/p/9595362.html</a></li>
</ol>
]]></content>
      <categories>
        <category>踩坑记录</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>SSL/TLS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客升级</title>
    <url>/Hexo%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7.html</url>
    <content><![CDATA[<h2 id="Hexo博客升级"><a href="#Hexo博客升级" class="headerlink" title="Hexo博客升级"></a>Hexo博客升级</h2><blockquote>
<p>上周看到自己一直在用的主题更新了，于是顺手执行了<code>git pull</code>，然后就GG了😔…</p>
<p>于是乎一整天什么都没干，就折腾这玩意儿了！！！</p>
</blockquote>
<h3 id="升级Butterfly"><a href="#升级Butterfly" class="headerlink" title="升级Butterfly"></a>升级Butterfly</h3><blockquote>
<p>关于该主题的安装以及升级，主题作者说的很清楚，这里就不赘述了，具体可查看这里：<a href="https://jerryc.me/posts/21cfbf15/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E4%BA%AE%E4%B8%BB%E9%A1%8C">Butterfly主题安装和升级</a>。</p>
</blockquote>
<h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><ul>
<li>Butterfly使用了<a href="https://hexo.io/docs/data-files.html">data file</a>特性，可直接使用<code>git pull</code>直接升级</li>
<li>之后运行<code>hexo-clean &amp;&amp; hexo-g &amp;&amp; hexo-s,</code>查看结果</li>
<li>如果更新成功，在Butterfly.yml文件中修改新配置，简单粗暴</li>
</ul>
<h3 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h3><blockquote>
<p>升级之前，记得先把npm和node升级了</p>
</blockquote>
<h4 id="升级Hexo-cli"><a href="#升级Hexo-cli" class="headerlink" title="升级Hexo-cli"></a>升级Hexo-cli</h4><p>在博客文件夹执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i Hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>然后执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure>
<p>之后输入<code>Hexo -v</code>查看版本结果</p>
<p>正常情况下，这样应该已经可以了，不过怎能以常理来对待它…，按照上述操作来，hexo会报一些莫名其妙的错误~</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/5-1G230223Z3531.jpg"></p>
<p><strong><code>所以应该采取下面这种做法，可保万无一失...😱</code></strong></p>
<h4 id="正经步骤"><a href="#正经步骤" class="headerlink" title="正经步骤"></a>正经步骤</h4><ol>
<li><p>升级Hexo-cli：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i Hexo-cli -g</span><br></pre></td></tr></table></figure></li>
<li><p>npm-check检查更新：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check     #先安装</span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure></li>
<li><p>npm-upgrade更新包，一路回车就ok：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g npm-upgrade   #先安装 </span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure></li>
<li><p>更新全局包：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm update -g</span><br></pre></td></tr></table></figure></li>
<li><p>更新生产环境依赖包：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm update --save</span><br></pre></td></tr></table></figure>
<blockquote>
<p>到此更新就已经结束了，如果输入<code>hexo--v</code>，如果更新成功，会显示如下结果：</p>
</blockquote>
</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://user-gold-cdn.xitu.io/2020/1/20/16fc1173ae4640c9?w=722&h=410&f=png&s=19384" alt="UTOOLS1579492522049.png"></p>
<h3 id="很重要"><a href="#很重要" class="headerlink" title="很重要"></a>很重要</h3><blockquote>
<p>如果你没有对博客进行版本控制的话，升级之前切记一定要备份，否则后果会很残忍…😼</p>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript面试题收藏（持续更新中...）</title>
    <url>/JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E8%97%8F.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文仅记录平时学习过程中遇到的知识点，只实现了相应方法的核心原理，部分边界细节并未处理。为了防止日后遗忘，特此记录，方便日后记忆，学习之用！</p>
</blockquote>
<h3 id="1-实现一个call函数"><a href="#1-实现一个call函数" class="headerlink" title="1.  实现一个call函数"></a>1.  实现一个call函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将要改变this指向的方法挂到目标this上执行并返回</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;not funciton&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...arg)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-实现一个apply函数"><a href="#2-实现一个apply函数" class="headerlink" title="2.  实现一个apply函数"></a>2.  实现一个apply函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;not funciton&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-实现一个bind函数"><a href="#3-实现一个bind函数" class="headerlink" title="3.  实现一个bind函数"></a>3.  实现一个bind函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理函数使用new的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> _this(...arg, ...arguments)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _this.apply(context, arg.concat(...arguments))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-instanceof的原理"><a href="#4-instanceof的原理" class="headerlink" title="4.  instanceof的原理"></a>4.  instanceof的原理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 右边变量的原型存在于左边变量的原型链上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instanceOf</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> leftValue = left.__proto__</span><br><span class="line">  <span class="keyword">let</span> rightValue = right.prototype</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftValue === right) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    leftValue = rightValue.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-Object-create的基本实现原理"><a href="#5-Object-create的基本实现原理" class="headerlink" title="5.  Object.create的基本实现原理"></a>5.  Object.create的基本实现原理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br></pre></td></tr></table></figure>
<h3 id="6-new本质"><a href="#6-new本质" class="headerlink" title="6.  new本质"></a>6.  new本质</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span> (<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个新对象且将其隐式原型指向构造函数原型</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      __proto__ : fun.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行构造函数</span></span><br><span class="line">    fun.call(obj, ...arguments)</span><br><span class="line">    <span class="comment">// 返回该对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = myNew(person)(<span class="string">&#x27;chen&#x27;</span>, <span class="number">18</span>) <span class="comment">// &#123;name: &quot;chen&quot;, age: 18&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="7-实现一个基本的Promise"><a href="#7-实现一个基本的Promise" class="headerlink" title="7.  实现一个基本的Promise"></a>7.  实现一个基本的Promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ①自动执行函数，②三个状态，③then</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 三个状态</span></span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.value = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.reason = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自动执行函数</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fn(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// then</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;fulfilled&#x27;</span>:</span><br><span class="line">        onFulfilled()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rejected&#x27;</span>:</span><br><span class="line">        onRejected()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-实现浅拷贝"><a href="#8-实现浅拷贝" class="headerlink" title="8.  实现浅拷贝"></a>8.  实现浅拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. ...实现</span></span><br><span class="line"><span class="keyword">let</span> copy1 = &#123;...&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.assign实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> copy2 = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="9-实现一个基本的深拷贝"><a href="#9-实现一个基本的深拷贝" class="headerlink" title="9.  实现一个基本的深拷贝"></a>9.  实现一个基本的深拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. JOSN.stringify()/JSON.parse()</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">x</span>: <span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 递归拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> copy = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">      copy[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">&#x27;object&#x27;</span> ? deepClone(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-使用setTimeout模拟setInterval"><a href="#10-使用setTimeout模拟setInterval" class="headerlink" title="10.  使用setTimeout模拟setInterval"></a>10.  使用setTimeout模拟setInterval</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可避免setInterval因执行时间导致的间隔执行时间不一致</span></span><br><span class="line"><span class="built_in">setTimeout</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  <span class="built_in">setTimeout</span> (<span class="built_in">arguments</span>.callee, <span class="number">500</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure>
<h3 id="11-js实现一个继承方法-借用构造函数继承实例属性"><a href="#11-js实现一个继承方法-借用构造函数继承实例属性" class="headerlink" title="11.  js实现一个继承方法// 借用构造函数继承实例属性"></a>11.  js实现一个继承方法// 借用构造函数继承实例属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寄生继承原型属性</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> Super = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Super.prototype = Parent.prototype</span><br><span class="line">  Child.prototype = <span class="keyword">new</span> Super()</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="12-实现一个基本的Event-Bus"><a href="#12-实现一个基本的Event-Bus" class="headerlink" title="12. 实现一个基本的Event Bus"></a>12. 实现一个基本的Event Bus</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件通信，一个触发与监听的过程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 存储事件</span></span><br><span class="line">    <span class="built_in">this</span>.events = <span class="built_in">this</span>.events || <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听事件</span></span><br><span class="line">  addListener (type, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.events.get(type)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.events.set(type, fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emit (type) &#123;</span><br><span class="line">    <span class="keyword">let</span> handle = <span class="built_in">this</span>.events.get(type)</span><br><span class="line">    handle.apply(<span class="built_in">this</span>, [...arguments].slice(<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> emitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.addListener(<span class="string">&#x27;ages&#x27;</span>, <span class="function"><span class="params">age</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">emitter.emit(<span class="string">&#x27;ages&#x27;</span>, <span class="number">18</span>)  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>
<h3 id="13-实现一个双向数据绑定"><a href="#13-实现一个双向数据绑定" class="headerlink" title="13. 实现一个双向数据绑定"></a>13. 实现一个双向数据绑定</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> span = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;text&#x27;</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取数据了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> obj.text</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新了&#x27;</span>)</span><br><span class="line">    input.value = newVal</span><br><span class="line">    span.innerHTML = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">input.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.text = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="14-实现一个简单路由"><a href="#14-实现一个简单路由" class="headerlink" title="14. 实现一个简单路由"></a>14. 实现一个简单路由</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 路由存储对象</span></span><br><span class="line">    <span class="built_in">this</span>.routes = &#123;&#125;</span><br><span class="line">    <span class="comment">// 当前hash</span></span><br><span class="line">    <span class="built_in">this</span>.currentHash = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 绑定this，避免监听时this指向改变</span></span><br><span class="line">    <span class="built_in">this</span>.freshRoute = <span class="built_in">this</span>.freshRoute.bind(<span class="built_in">this</span>)</span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="built_in">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="built_in">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存储</span></span><br><span class="line">  storeRoute (path, cb) &#123;</span><br><span class="line">    <span class="built_in">this</span>.routes[path] = cb || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  freshRoute () &#123;</span><br><span class="line">    <span class="built_in">this</span>.currentHash = location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.routes[<span class="built_in">this</span>.currentHash]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="15-实现懒加载"><a href="#15-实现懒加载" class="headerlink" title="15. 实现懒加载"></a>15. 实现懒加载</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/3.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/4.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/5.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/6.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/7.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/8.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/9.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/default.png&quot;</span> <span class="attr">data</span>=<span class="string">&quot;./imgs/10.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imgs =  <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="comment">// 可视区高度</span></span><br><span class="line"><span class="keyword">let</span> clientHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 滚动卷去的高度</span></span><br><span class="line">  <span class="keyword">let</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i ++) &#123;</span><br><span class="line">    <span class="comment">// 得到图片顶部距离可视区顶部的距离</span></span><br><span class="line">    <span class="keyword">let</span> x = clientHeight + scrollTop - imgs[i].offsetTop</span><br><span class="line">    <span class="comment">// 图片在可视区内</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; x &lt; clientHeight+imgs[i].height) &#123;</span><br><span class="line">      imgs[i].src = imgs[i].getAttribute(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(lazyLoad, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<h3 id="16-rem实现原理"><a href="#16-rem实现原理" class="headerlink" title="16. rem实现原理"></a>16. rem实现原理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> doc = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="keyword">let</span> width = doc.getBoundingClientRect().width</span><br><span class="line">  <span class="comment">// 假设设计稿为宽750，则rem为10px</span></span><br><span class="line">  <span class="keyword">let</span> rem = width / <span class="number">75</span></span><br><span class="line">  doc.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="17-手写实现AJAX"><a href="#17-手写实现AJAX" class="headerlink" title="17. 手写实现AJAX"></a>17. 手写实现AJAX</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 简单实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.send(data)</span><br><span class="line"><span class="comment">// 设置状态变化回调处理请求结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyStatus === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 基于promise实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请求地址</span></span><br><span class="line">  <span class="keyword">const</span> url = options.url</span><br><span class="line">  <span class="comment">// 请求方法</span></span><br><span class="line">  <span class="keyword">const</span> method = options.method.toLocaleLowerCase() || <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  <span class="comment">// 默认为异步true</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">async</span> = options.async</span><br><span class="line">  <span class="comment">// 请求参数</span></span><br><span class="line">  <span class="keyword">const</span> data = options.data</span><br><span class="line">  <span class="comment">// 实例化</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 请求超时</span></span><br><span class="line">  <span class="keyword">if</span> (options.timeout &amp;&amp; options.timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    xhr.timeout = options.timeout</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个Promise实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    xhr.ontimeout = <span class="function">() =&gt;</span> reject &amp;&amp; reject(<span class="string">&#x27;请求超时&#x27;</span>)</span><br><span class="line">    <span class="comment">// 监听状态变化回调</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 200-300 之间表示请求成功，304资源未变，取缓存</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">          resolve &amp;&amp; resolve(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject &amp;&amp; reject()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 错误回调</span></span><br><span class="line">    xhr.onerror = <span class="function"><span class="params">err</span> =&gt;</span> reject &amp;&amp; reject(err)</span><br><span class="line">    <span class="keyword">let</span> paramArr = []</span><br><span class="line">    <span class="keyword">let</span> encodeData</span><br><span class="line">    <span class="comment">// 处理请求参数</span></span><br><span class="line">    <span class="keyword">if</span> (data <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="comment">// 参数拼接需要通过 encodeURIComponent 进行编码</span></span><br><span class="line">        paramArr.push(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[key]))</span><br><span class="line">      &#125;</span><br><span class="line">      encodeData = paramArr.join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get请求拼接参数</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测url中是否已存在 ? 及其位置</span></span><br><span class="line">      <span class="keyword">const</span> index = url.indexOf(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (index === -<span class="number">1</span>) url += <span class="string">&#x27;?&#x27;</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (index !== url.length -<span class="number">1</span>) url += <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">      <span class="comment">// 拼接url</span></span><br><span class="line">      url += encodeData</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    xhr.open(method, url, <span class="keyword">async</span>)</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&#x27;get&#x27;</span>) xhr.send(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// post 方式需要设置请求头</span></span><br><span class="line">      xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>)</span><br><span class="line">      xhr.send(encodeData)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="18-实现拖拽"><a href="#18-实现拖拽" class="headerlink" title="18. 实现拖拽"></a>18. 实现拖拽</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// drag处于绝对定位状态</span></span><br><span class="line">  <span class="keyword">let</span> drag = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">  drag.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event</span><br><span class="line">    <span class="comment">// 鼠标与拖拽元素边界的距离 = 鼠标与可视区边界的距离 - 拖拽元素与边界的距离</span></span><br><span class="line">    <span class="keyword">let</span> diffX = e.clientX - drag.offsetLeft</span><br><span class="line">    <span class="keyword">let</span> diffY = e.clientY - drag.offsetTop</span><br><span class="line">    drag.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 拖拽元素移动的距离 = 鼠标与可视区边界的距离 - 鼠标与拖拽元素边界的距离</span></span><br><span class="line">      <span class="keyword">let</span> left = e.clientX - diffX</span><br><span class="line">      <span class="keyword">let</span> top = e.clientY - diffY</span><br><span class="line">      <span class="comment">// 避免拖拽出可视区</span></span><br><span class="line">      <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="built_in">window</span>.innerWidth - drag.offsetWidth) &#123;</span><br><span class="line">        left = <span class="built_in">window</span>.innerWidth - drag.offsetWidth</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        top = <span class="number">0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt; <span class="built_in">window</span>.innerHeight - drag.offsetHeight) &#123;</span><br><span class="line">        top = <span class="built_in">window</span>.innerHeight - drag.offsetHeight</span><br><span class="line">      &#125;</span><br><span class="line">      drag.style.left = left + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      drag.style.top = top + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    drag.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.onmousemove = <span class="literal">null</span></span><br><span class="line">      <span class="built_in">this</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="19-实现一个节流函数"><a href="#19-实现一个节流函数" class="headerlink" title="19. 实现一个节流函数"></a>19. 实现一个节流函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 利用闭包保存时间</span></span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">let</span> arg = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">      fn.apply(context, arg)</span><br><span class="line">      prev = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;节流&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttle(fn, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>
<h3 id="20-实现一个防抖函数"><a href="#20-实现一个防抖函数" class="headerlink" title="20. 实现一个防抖函数"></a>20. 实现一个防抖函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, delay</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 利用闭包保存定时器  </span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>    </span><br><span class="line">        <span class="keyword">let</span> arg = <span class="built_in">arguments</span>    </span><br><span class="line">        <span class="comment">// 在规定时间内再次触发会先清除定时器后再重设定时器    </span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)    </span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      </span><br><span class="line">            fn.apply(context, arg)    </span><br><span class="line">        &#125;, delay)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;防抖&#x27;</span>)</span><br><span class="line">&#125;addEventListener(<span class="string">&#x27;scroll&#x27;</span>, debounce(fn, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote>
<p>后续也会持续更新，希望能对所有像我一样的前端新手都有所帮助。共同进步~</p>
</blockquote>
]]></content>
      <categories>
        <category>大前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>-JavaScript -面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基础语法</title>
    <url>/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
    <content><![CDATA[<h1 id="Markdown基础语法"><a href="#Markdown基础语法" class="headerlink" title="Markdown基础语法"></a>Markdown基础语法</h1><hr>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><blockquote>
<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>Markdown 的特点就是，让写作变得更简单，我们不用再考虑如何排版，我们只要专心于写作就好了，其目标就是实现<code>「易读易写」</code>。  </p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><h3 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h3><ul>
<li><p>Markdown支持6种级别的标题，一个#是一级标题，二个#是二级标题，以此类推，对应html标签 <strong>h1 ~ h6</strong>。</p>
</li>
<li><p>除此之外，Markdown还支持另外一种形式的标题展示形式，其类似于 <a href="https://link.jianshu.com/?t=http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 标记语言的表现形式，使用下划线进行文本大小的控制。使用这种方式处理标题仅有两种表现形式，即一级标题和二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">  </span><br><span class="line">## 这是二级标题</span><br><span class="line">  </span><br><span class="line">### 这是三级标题</span><br><span class="line">  </span><br><span class="line">#### 这是四级标题</span><br><span class="line">  </span><br><span class="line">##### 这是三级标题</span><br><span class="line">  </span><br><span class="line">###### 这是四级标题</span><br></pre></td></tr></table></figure>
<p>以上标记显示效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是三级标题-1"><a href="#这是三级标题-1" class="headerlink" title="这是三级标题"></a>这是三级标题</h5><h6 id="这是四级标题-1"><a href="#这是四级标题-1" class="headerlink" title="这是四级标题"></a>这是四级标题</h6></li>
</ul>
<hr>
<h3 id="2-2-文本"><a href="#2-2-文本" class="headerlink" title="2.2 文本"></a>2.2 文本</h3><h4 id="1-加粗"><a href="#1-加粗" class="headerlink" title="1. 加粗"></a>1. 加粗</h4><p>​        要加粗的文字左右分别用两个*号（或_号）包起来</p>
<h4 id="2-斜体"><a href="#2-斜体" class="headerlink" title="2. 斜体"></a>2. 斜体</h4><p>​        要倾斜的文字左右分别用一个*号或（或_号）包起来</p>
<h4 id="3-斜体加粗"><a href="#3-斜体加粗" class="headerlink" title="3. 斜体加粗"></a>3. 斜体加粗</h4><p>​        文字左右分别用三个*号或（或_号）包起来</p>
<h4 id="4-下划线"><a href="#4-下划线" class="headerlink" title="4. 下划线"></a>4. 下划线</h4><p>​        使用<code>&lt;u&gt;&lt;/u&gt;</code>，中间写入内容</p>
<h4 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5. 删除线"></a>5. 删除线</h4><p>​        要加删除线的文字左右分别用两个~~号包起来</p>
<p>​        以上標記示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line"></span><br><span class="line">*这是倾斜的而文字*</span><br><span class="line"></span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">	</span><br><span class="line">&lt;u&gt;这是有下划线的文字&lt;&#x2F;u&gt;</span><br><span class="line"></span><br><span class="line">~~这是加出现的文字~~</span><br></pre></td></tr></table></figure>
<p>​        以上标记显示效果如下：</p>
<p>​        <strong>这是加粗的文字</strong></p>
<p>​        <em>这是倾斜的而文字</em></p>
<p>​        <strong><em>这是斜体加粗的文字</em></strong></p>
<p>​        <u>这是有下划线的文字</u></p>
<p>​        <del>这是加出现的文字</del></p>
<blockquote>
<p>PS：空行输入&amp;nbsp；换行的话要隔一行</p>
</blockquote>
<hr>
<h3 id="2-3-列表"><a href="#2-3-列表" class="headerlink" title="2.3 列表"></a>2.3 列表</h3><h4 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1. 有序列表"></a>1. 有序列表</h4><p>​        语法：数字+点   Markdown将只关注你的第一个项目的数字编号，之后按<code>enter</code>会自动排序</p>
<p>​        示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>
<p>​        效果如下：</p>
<ol>
<li>列表內容<ol start="2">
<li>列表內容</li>
<li>列表內容</li>
</ol>
</li>
</ol>
<h4 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2. 无序列表"></a>2. 无序列表</h4><p>​        语法：用 _  +  *  任意一种都可以</p>
<p>​        示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>
<p>​        效果如下：</p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<p>​      <code>列表是可以嵌套的！</code></p>
<h4 id="3-任务列表"><a href="#3-任务列表" class="headerlink" title="3. 任务列表"></a>3. 任务列表</h4><p>​    示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] 围天安门跑三百圈</span><br><span class="line">- [x] 教学计划</span><br><span class="line">- [ ] 读一本书</span><br></pre></td></tr></table></figure>
<p>​    效果展示：</p>
<ul>
<li><input disabled="" type="checkbox"> 围天安门跑三百圈</li>
<li><input checked="" disabled="" type="checkbox"> 教学计划</li>
<li><input disabled="" type="checkbox"> 读一本书</li>
</ul>
<hr>
<h3 id="2-4-引用"><a href="#2-4-引用" class="headerlink" title="2.4 引用"></a>2.4 引用</h3><p>​        在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…</p>
<p>​        示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Typora热爱文字更佳，码农或者文字工作者必备神器</span><br><span class="line">&gt;&gt; 所見所得的Markdown編輯器</span><br><span class="line">&gt;&gt;&gt; 書寫即為美學！</span><br></pre></td></tr></table></figure>
<p>​        效果如下：</p>
<blockquote>
<p>Typora热爱文字更佳，码农或者文字工作者必备神器</p>
<blockquote>
<p>所見所得的Markdown編輯器</p>
<blockquote>
<p>書寫即為美學！</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="2-5-图片"><a href="#2-5-图片" class="headerlink" title="2.5 图片"></a>2.5 图片</h3><p>​       语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>
<p>​        示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片](https:&#x2F;&#x2F;picgo-img-1259503129.cos.ap-beijing.myqcloud.com&#x2F;c31f7fdc1bb4d377e6e11073240bdcfc.jpg)</span><br></pre></td></tr></table></figure>
<p>​        效果如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/c31f7fdc1bb4d377e6e11073240bdcfc.jpg" alt="图片"></p>
<h3 id="2-6-超链接"><a href="#2-6-超链接" class="headerlink" title="2.6 超链接"></a>2.6 超链接</h3><p>​        语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>
<p>​        示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure>
<p>​        效果：</p>
<p>​        <a href="http://jianshu.com/">简书</a><br>​        <a href="http://baidu.com/">百度</a></p>
<p><code>注： 引用图片和链接的唯一区别就是在最前方添加一个感叹号。</code></p>
<hr>
<h3 id="2-7-分割线"><a href="#2-7-分割线" class="headerlink" title="2.7 分割线"></a>2.7 分割线</h3><p>​        三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">****</span><br><span class="line">---</span><br><span class="line">----</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<hr>
<h3 id="2-8-表格"><a href="#2-8-表格" class="headerlink" title="2.8 表格"></a>2.8 表格</h3><p>表格是Markdown语法中比较复杂的一个，其语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">表头|条目一|条目二</span><br><span class="line">|:---:|:---:|:---:|</span><br><span class="line">|项目|项目一|项目二|</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">姓名|技能|排行</span><br><span class="line">|:--:|:--:|:--:|:</span><br><span class="line">|刘备|哭|大哥|</span><br><span class="line">|关羽|打|二哥|</span><br><span class="line">|张飞|骂|三弟|</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其效果如下：</p>
<table>
<thead>
<tr>
<th align="center">姓名</th>
<th align="center">技能</th>
<th align="center">排行</th>
</tr>
</thead>
<tbody><tr>
<td align="center">刘备</td>
<td align="center">哭</td>
<td align="center">大哥</td>
</tr>
<tr>
<td align="center">关羽</td>
<td align="center">打</td>
<td align="center">二哥</td>
</tr>
<tr>
<td align="center">张飞</td>
<td align="center">罵</td>
<td align="center">三弟</td>
</tr>
</tbody></table>
<p>​    <code>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中，文字默认居中。</code></p>
<hr>
<h3 id="2-9-代码块"><a href="#2-9-代码块" class="headerlink" title="2.9 代码块"></a>2.9 代码块</h3><ul>
<li><p>单行代码</p>
<p>语法：代码之间分别用一个反引号包起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;代码内容&#96;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;console.log(123456);&#96;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><code>console.log(123456);</code></p>
</li>
<li><p>代码块</p>
<p>语法：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">​(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#96;&#96;&#96;)javascript</span><br><span class="line">var txt &#x3D; &quot;&quot;;</span><br><span class="line">var numbers &#x3D; [45, 4, 9, 16, 25];</span><br><span class="line">	  numbers.forEach(myFunction);</span><br><span class="line">function myFunction(value) &#123;</span><br><span class="line"> 	  txt &#x3D; txt + value + &quot;&lt;br&gt;; </span><br><span class="line">&#125;</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这里的（）是为了防止转义，实际操作中没有括号</p>
</blockquote>
<p>效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line">  numbers.forEach(myFunction);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  txt = txt + value + <span class="string">&quot;&lt;br&gt;&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p><code>注意：代码高亮需要在开头的三个反引号后面写上选用哪种语言</code></p>
</li>
</ul>
<h3 id="2-10-反斜杠"><a href="#2-10-反斜杠" class="headerlink" title="2.10 反斜杠"></a>2.10 反斜杠</h3><blockquote>
<p>反斜杠相当于转义的作用，是一些符号以普通的符号显示出来</p>
</blockquote>
<p>Markdown使用反斜杠\插入语法中用到的特殊符号。在Markdown中，主要有以下几种特殊符号需要处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</code></p>
<hr>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><blockquote>
<p>Markdown的一些高级用法，像数学公式、制图等，小伙伴儿们可以参考<a href="http://www.markdown.cn/">官网</a>的案例，我这里呢..就没必要去记了😂😂😂<br>Markdown对喜欢写作的小伙伴儿们来说是一门必备的技能。如果你希望快速掌握Markdown，很简单，动起来吧！</p>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>SASS语法基础篇</title>
    <url>/SASS%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-%E4%B8%80.html</url>
    <content><![CDATA[<h2 id="SASS基础语法学习"><a href="#SASS基础语法学习" class="headerlink" title="SASS基础语法学习"></a>SASS基础语法学习</h2><h3 id="一-引言"><a href="#一-引言" class="headerlink" title="一. 引言"></a>一. 引言</h3><blockquote>
<p>本文仅仅记录自己的学习历程，作为自己日后翻阅复习之用，并无什么高深的见解，只为温故而知新…</p>
</blockquote>
<h3 id="二-官方网站网：-SASS中文网"><a href="#二-官方网站网：-SASS中文网" class="headerlink" title="二. 官方网站网： SASS中文网"></a>二. 官方网站网： <a href="https://www.sass.hk/">SASS中文网</a></h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><blockquote>
<p>Sass有以下几种安装方式：</p>
<ul>
<li>使用独立的安装包（各平台，需要手动添加环境变量）<a href="https://github.com/sass/dat-sass/release"> 链接…</a></li>
<li>使用NPM安装（各平台）</li>
<li>使用Chocolatey包管理工具安装（Windows）</li>
<li>使用Brew安装（macOS）</li>
</ul>
</blockquote>
<ul>
<li><p>Windows下需先安装<a href="http://www.ruby-lang.org/zh_cn/">Ruby</a><br><code> 注意：安装过程中请注意勾选Add Ruby executables to your PATH添加到系统环境变量</code></p>
</li>
<li><p>测试安装有没有成功</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ruby</span> <span class="selector-tag">-v</span></span><br><span class="line">//如安装成功会打印</span><br><span class="line"><span class="selector-tag">ruby</span> 2.2.2<span class="selector-tag">p95</span> (2015<span class="selector-tag">-04-13</span> <span class="selector-tag">revision</span> 50295) <span class="selector-attr">[i386-mingw32]</span></span><br></pre></td></tr></table></figure></li>
<li><p>更换gem源</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//1.删除原<span class="selector-tag">gem</span>源</span><br><span class="line"><span class="selector-tag">gem</span> <span class="selector-tag">sources</span> <span class="selector-tag">--remove</span> <span class="selector-tag">https</span>://<span class="selector-tag">rubygems</span><span class="selector-class">.org</span>/</span><br><span class="line"></span><br><span class="line">//2.添加国内淘宝源</span><br><span class="line"><span class="selector-tag">gem</span> <span class="selector-tag">sources</span> <span class="selector-tag">-a</span> <span class="selector-tag">https</span>://<span class="selector-tag">ruby</span><span class="selector-class">.taobao</span><span class="selector-class">.org</span>/</span><br><span class="line"></span><br><span class="line">//3.打印是否替换成功</span><br><span class="line"><span class="selector-tag">gem</span> <span class="selector-tag">sources</span> <span class="selector-tag">-l</span></span><br><span class="line"></span><br><span class="line">//4.更换成功后打印如下</span><br><span class="line">*** <span class="selector-tag">CURRENT</span> <span class="selector-tag">SOURCES</span> ***</span><br><span class="line"><span class="selector-tag">https</span>://<span class="selector-tag">ruby</span><span class="selector-class">.taobao</span><span class="selector-class">.org</span>/</span><br></pre></td></tr></table></figure></li>
<li><p>安装Sass和Compass<br>使用Ruby自带的RubyGems系统</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//安装如下(如<span class="selector-tag">mac</span>安装遇到权限问题需加 <span class="selector-tag">sudo</span> <span class="selector-tag">gem</span> <span class="selector-tag">install</span> <span class="selector-tag">sass</span>)</span><br><span class="line"><span class="selector-tag">gem</span> <span class="selector-tag">install</span> <span class="selector-tag">sass</span></span><br><span class="line"><span class="selector-tag">gem</span> <span class="selector-tag">install</span> <span class="selector-tag">compass</span></span><br></pre></td></tr></table></figure></li>
<li><p>sass常用更新、查看版本、sass命令帮助等命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//更新<span class="selector-tag">sass</span></span><br><span class="line"><span class="selector-tag">gem</span> <span class="selector-tag">update</span> <span class="selector-tag">sass</span></span><br><span class="line"></span><br><span class="line">//查看<span class="selector-tag">sass</span>版本</span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">-v</span></span><br><span class="line"></span><br><span class="line">//查看<span class="selector-tag">sass</span>帮助</span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">-h</span></span><br></pre></td></tr></table></figure></li>
<li><p>编译sass</p>
<ul>
<li> 命令行编译</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//单文件转换命令</span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">input</span><span class="selector-class">.scss</span> <span class="selector-tag">output</span><span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line">//单文件监听命令</span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">--watch</span> <span class="selector-tag">input</span><span class="selector-class">.scss</span><span class="selector-pseudo">:output.css</span></span><br><span class="line"></span><br><span class="line">//如果你有很多的<span class="selector-tag">sass</span>文件的目录，你也可以告诉<span class="selector-tag">sass</span>监听整个目录：</span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">--watch</span> <span class="selector-tag">app</span>/<span class="selector-tag">sass</span><span class="selector-pseudo">:public</span>/<span class="selector-tag">stylesheets</span></span><br></pre></td></tr></table></figure>
<ul>
<li>软件方式编译<br>推荐<code>koala</code>&amp; codekit</li>
</ul>
</li>
</ul>
<h4 id="2-SASS与SCSS"><a href="#2-SASS与SCSS" class="headerlink" title="2. SASS与SCSS"></a>2. SASS与SCSS</h4><ul>
<li><p>.SASS<br>它使用 “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性，很多人认为这样做比 SCSS 更容易阅读，书写也更快速。缩进格式也可以使用 Sass 的全部功能，只是与 SCSS 相比个别地方采取了不同的表达方式。这种格式以 .scss 作为拓展名。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#f00</span></span><br><span class="line">    <span class="selector-tag">background</span>:<span class="selector-id">#fff</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>.SCSS<br>仅在 CSS3 语法的基础上进行拓展，所有 CSS3 语法在 SCSS 中都是通用的，同时加入 Sass 的特色功能。此外，SCSS 也支持大多数 CSS hacks 写法以及浏览器前缀写法 (vendor-specific syntax)，以及早期的 IE 滤镜写法。这种格式以 .scss 作为拓展名。</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br></pre></td></tr></table></figure>
<h3 id="三-变量的使用"><a href="#三-变量的使用" class="headerlink" title="三. 变量的使用"></a>三. 变量的使用</h3></li>
</ul>
<h4 id="1-变量申明"><a href="#1-变量申明" class="headerlink" title="1. 变量申明  $"></a>1. 变量申明  <strong>$</strong></h4><ul>
<li>写法：$highlight-color：#fff；</li>
<li>全局变量变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量）；不在嵌套规则内定义的变量则可在任何地方使用（全局变量）</li>
<li>将局部变量转换为全局变量可以添加 <strong><em>!global</em></strong></li>
</ul>
<h4 id="2-变量的引用"><a href="#2-变量的引用" class="headerlink" title="2. 变量的引用"></a>2. 变量的引用</h4><blockquote>
<p>凡是css属性的标准值可存在的地方，变量就可以使用</p>
</blockquote>
<h4 id="3-变量名"><a href="#3-变量名" class="headerlink" title="3. 变量名"></a>3. 变量名</h4><blockquote>
<p>sass的变量名可以与css中的属性名和选择器名称相同，包括中划线、下划线</p>
</blockquote>
<blockquote>
<p>中划线和下划线两种方式是相互兼容的；用中划线声明的变量可以使用下划线的方式引用，反之亦然</p>
</blockquote>
<h3 id="四-嵌套规则"><a href="#四-嵌套规则" class="headerlink" title="四. 嵌套规则"></a>四. 嵌套规则</h3><h4 id="1-父选择器标识符-—-amp"><a href="#1-父选择器标识符-—-amp" class="headerlink" title="1. 父选择器标识符 —- &amp;"></a>1. 父选择器标识符 —- <strong>&amp;</strong></h4><ul>
<li><p>为父级元素添加 :hover等伪类时使用</p>
</li>
<li><p>&amp;还有另一种用法，可以在父选择器之前添加选择器</p>
<blockquote>
<p>例如：在ie浏览器下才显示的样式</p>
</blockquote>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  body.ie &amp; &#123; color: green &#125;</span><br><span class="line">&#125;</span><br><span class="line">//编译后</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123;<span class="attribute">color</span>: red&#125;;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.ie</span> <span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123; <span class="attribute">color</span>: green &#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-群组选择器的嵌套"><a href="#2-群组选择器的嵌套" class="headerlink" title="2. 群组选择器的嵌套"></a>2. 群组选择器的嵌套</h4><ul>
<li>群组选择器规则内嵌的规则</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  h1, h2, h3 &#123;margin-bottom: .8em&#125;</span><br><span class="line">&#125;</span><br><span class="line">//编译为</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h1</span>, <span class="selector-class">.container</span> <span class="selector-tag">h2</span>, <span class="selector-class">.container</span> <span class="selector-tag">h3</span> &#123; <span class="attribute">margin-bottom</span>: .<span class="number">8em</span> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>内嵌在群组选择器的嵌套规则</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span>, <span class="selector-tag">aside</span> &#123;</span><br><span class="line">  a &#123;color: blue&#125;</span><br><span class="line">&#125;</span><br><span class="line">//编译为</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span>, <span class="selector-tag">aside</span> <span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: blue&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-gt-、-和"><a href="#3-gt-、-和" class="headerlink" title="3. &gt;、+和~"></a>3. &gt;、+和~</h4><ul>
<li>可以把他们放在外层选择器后边或者里层选择器的前边：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  ~ article &#123; border-top: 1px dashed #ccc &#125;</span><br><span class="line">  &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span> &#125;</span><br><span class="line">  <span class="selector-tag">dl</span> &gt; &#123;</span><br><span class="line">    dt &#123; color: #333 &#125;</span><br><span class="line">    <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">nav</span> + &amp; &#123; <span class="attribute">margin-top</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">//编译为</span><br><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">footer</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dt</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span> &#125;</span><br><span class="line"><span class="selector-tag">nav</span> + <span class="selector-tag">article</span> &#123; <span class="attribute">margin-top</span>: <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-属性嵌套"><a href="#4-属性嵌套" class="headerlink" title="4. 属性嵌套"></a>4. 属性嵌套</h4><ul>
<li>在sass中属性也是可以嵌套的</li>
<li>嵌套属性的规则：</li>
</ul>
<blockquote>
<p>把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。就像css选择器嵌套一样，sass会把你的子属性一一解开，把根属性和子属性部分通过中划线-连接起来，最后生成的效果与你手动一遍遍写的css样式一样：</p>
</blockquote>
<h3 id="五-导入SASS文件"><a href="#五-导入SASS文件" class="headerlink" title="五. 导入SASS文件"></a>五. 导入SASS文件</h3><blockquote>
<p>随着你的样式表变得越来越大，这种写法也很难保持结构清晰。有时，处理这种大量样式的唯一方法就是把它们分拆到多个文件中。sass通过对css原有@import规则的改进直接支持了这一特性。</p>
</blockquote>
<h4 id="1-利用-import规则"><a href="#1-利用-import规则" class="headerlink" title="1. 利用@import规则"></a>1. 利用@import规则</h4><blockquote>
<p>所有在被导入文件中定义的变量和混合器均可以在导入文件中使用<br>导入文件时，可不用指明文件的全名，可省略文件后缀</p>
</blockquote>
<h4 id="2-使用SASS部分文件"><a href="#2-使用SASS部分文件" class="headerlink" title="2. 使用SASS部分文件"></a>2. 使用SASS部分文件</h4><ul>
<li><p><strong>局部文件</strong></p>
<blockquote>
<p>那些专门为import命令而写的sass文件，并不需要生成对应的独立css文件，这样的sass文件成为局部文件</p>
</blockquote>
</li>
<li><p><code>对于局部文件，有一些约定：</code></p>
<ol>
<li>文件名以下划线开头：这样sass就不会在编译时单独编译这个文件输出css，而只是把这个文件用作导入</li>
<li>导入局部文件时，还可以不写文件按的全名，即省略文件名开头的下划线</li>
<li>可以被多个不同的文件引用</li>
</ol>
</li>
</ul>
<h4 id="3-默认变量值"><a href="#3-默认变量值" class="headerlink" title="3. 默认变量值"></a>3. 默认变量值</h4><ul>
<li>反复申明同一个变量，最后一处申明会覆盖之前的值</li>
<li>利用 <code>!default</code> 标签，其含义是：如果这个变量被申明赋值了，那就用它申明的值，否则就用这个默认值</li>
</ul>
<h4 id="4-嵌套导入"><a href="#4-嵌套导入" class="headerlink" title="4. 嵌套导入"></a>4. 嵌套导入</h4><ul>
<li>sass允许@import命令写在css规则内</li>
<li>被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效；这些变量和混合器不会全局有效。</li>
</ul>
<h4 id="5-原生的CSS导入"><a href="#5-原生的CSS导入" class="headerlink" title="5. 原生的CSS导入"></a>5. 原生的CSS导入</h4><ul>
<li>不能用sass的@import直接导入以个原始的css文件，sass会误认为你是想用css原生的@import</li>
<li>因为sass语法完全兼容css，所以可以把原始的css’文件改名为.scss后缀</li>
</ul>
<h4 id="6-静默注释"><a href="#6-静默注释" class="headerlink" title="6. 静默注释"></a>6. 静默注释</h4><ul>
<li>以//开头，注释内容直到行末</li>
<li>这种注释不会出现在生成的长css文件中</li>
</ul>
<h4 id="7-混合器"><a href="#7-混合器" class="headerlink" title="7. 混合器"></a>7. 混合器</h4><blockquote>
<p>当你的样式变得越来越复杂时，需要大段重用样式的代码的时候，独立变量就没法应付了；而通过混合器可以简单解决这一问题</p>
</blockquote>
<ul>
<li><strong>避免滥用混合器</strong></li>
<li><strong>混合器中的CSS规则</strong><br>可以在混合器中使用嵌套规则；也可以使用&amp;符</li>
<li><strong>给混合器传参</strong></li>
<li><strong>默认参数值</strong><br>通过$name:default-value的生命形式；默认值可以是<br>写法与JS的function很像：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> link-colors($normal, $hover, $visited) &#123;</span><br><span class="line">  color: $normal;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: $hover; &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: $visited; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  @include link-colors(blue, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">Sass</span>最终生成的是：</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure>
<p><strong><code>可通过语法$name：value的形式来指定每个参数的值，这样就不用考虑参数的顺序了</code></strong></p>
<h4 id="8-使用选择器继承-extend-来精简CSS"><a href="#8-使用选择器继承-extend-来精简CSS" class="headerlink" title="8. 使用选择器继承(@extend)来精简CSS"></a>8. 使用选择器继承(<strong><code>@extend</code></strong>)来精简CSS</h4><ul>
<li><p><strong>减少重复的特性</strong></p>
<ul>
<li>基于面向对象的css的理念，利用继承器可以继承为另一个选择器定义的所有样式</li>
<li>通过<code>@extend</code>语法实现**</li>
</ul>
</li>
<li><p><strong>何时使用继承</strong></p>
<blockquote>
<p>混合器主要是用于展示性样式的重用，而类名是用于语义化样式的重用，所以继承应该是建立在语义化的关系上。<br>一般在一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式时，可选用@extend的方式来继承样式</p>
</blockquote>
</li>
<li><p><strong>继承的高级用法</strong></p>
<blockquote>
<p>任何css规则都可以继承其他规则，几乎任何css规则也都可以被继承</p>
</blockquote>
</li>
</ul>
<h3 id="六-待续…"><a href="#六-待续…" class="headerlink" title="六. 待续…"></a>六. 待续…</h3>]]></content>
      <categories>
        <category>大前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>语法</tag>
        <tag>2019</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF学习笔记(四)字体图标的使用</title>
    <url>/WPF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<h2 id="WPF中字体图标的使用"><a href="#WPF中字体图标的使用" class="headerlink" title="WPF中字体图标的使用"></a>WPF中字体图标的使用</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote>
<p>目前，前端开发，比如Android、Web等，对于图标字体运用是越来越广泛。本人目前因某些原因(生活所迫…😔)，不得不自学WPF，在这期间用到了这些知识，所以本文就WPF中字体图标的使用进行阐述。</p>
</blockquote>
<h3 id="二、图标字体"><a href="#二、图标字体" class="headerlink" title="二、图标字体"></a>二、图标字体</h3><h3 id="2-1-图标字体的优劣势"><a href="#2-1-图标字体的优劣势" class="headerlink" title="2.1 图标字体的优劣势"></a>2.1 图标字体的优劣势</h3><ul>
<li><p>优势</p>
<ol>
<li><p>轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，不需要下载一个个图像。这样可以减少HTTP的请求数量，而且和HTML5的离线存储配合，可以对性能做出优化。</p>
</li>
<li><p>灵活性：不调字体可以像页面中的文字一样，通过font-size属性来对其进行大小的设置，而且还可以添加各种文字效果，如color、hover、filter、text-shadow、transform等效果。灵活的简直不像话！</p>
</li>
<li><p>兼容性：图标字体支持现代浏览器，甚至是低版本的IE浏览器，所以可以放心的使用它。</p>
</li>
<li><p>相比于位图放大图片会出现失真、缩小又会浪费掉像素点，图标字体不会出现这种情况。</p>
</li>
</ol>
</li>
<li><p>劣势</p>
<ol>
<li>图标字体只能被渲染成单色，或者是CSS3的渐变色</li>
<li>版权上也有着对应的限制，当然还是有很多免费的图标字体可以供我们下载。</li>
<li>当自己创作图标字体的时候，是比较耗费时间的，重构人员的后期维护成本也比较高</li>
</ol>
<blockquote>
<p>字体图标其实就是将矢量图打包到字体文件中，就像使用一般外置字体一样来使用，因此在WinForm、WPF中也是可以使用的。所以，开干…</p>
</blockquote>
</li>
</ul>
<h3 id="三、WPF中使用字体图标"><a href="#三、WPF中使用字体图标" class="headerlink" title="三、WPF中使用字体图标"></a>三、WPF中使用字体图标</h3><blockquote>
<p>开源字体图标很多，很容易获取，项目开发中需要的绝大部分图标都可以找到，像<a href="http://www.fontawesome.com.cn/">Font Awesome</a>，<a href="https://www.iconfont.cn/">Iconfont</a>，<a href="https://material.io/resources/icons/?style=baseline">Material Design</a>等….</p>
</blockquote>
<h3 id="3-1-如何使用"><a href="#3-1-如何使用" class="headerlink" title="3.1 如何使用"></a>3.1 如何使用</h3><ol>
<li><p>创建字体资源项目</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/icon-2.png"></p>
</li>
<li><p>将字体文件加入到项目资源</p>
<p>下载所需要的字体文件(后缀为.tff的文件)，添加到项目中，并设置生成操作为”Resource”，如下图：</p>
</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/icon-1.png"></p>
<h3 id="3-2-使用方式"><a href="#3-2-使用方式" class="headerlink" title="3.2 使用方式"></a>3.2 使用方式</h3><ol>
<li><p>定义样式</p>
<p>使用TextBlock作为图标显示的容器，因此定义一个TextBlock的样式即可，其中iconfont为字体名称，可在创建字体图标项目时修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--Ficon--&gt;</span><br><span class="line">&lt;Style x:Key&#x3D;&quot;Ficon&quot; TargetType&#x3D;&quot;&#123;x:Type TextBlock&#125;&quot;&gt;</span><br><span class="line">    &lt;Setter Property&#x3D;&quot;FontFamily&quot; Value&#x3D;&quot;Resources&#x2F;Fonts&#x2F;#iconfont&quot;&#x2F;&gt;</span><br><span class="line">    &lt;Setter Property&#x3D;&quot;FontSize&quot; Value&#x3D;&quot;26&quot;&#x2F;&gt;</span><br><span class="line">    &lt;Setter Property&#x3D;&quot;VerticalContentAlignment&quot; Value&#x3D;&quot;Center&quot;&#x2F;&gt;</span><br><span class="line">    &lt;Setter Property&#x3D;&quot;HorizontalContentAlignment&quot; Value&#x3D;&quot;Left&quot;&#x2F;&gt;</span><br><span class="line">    &lt;Setter Property&#x3D;&quot;BorderBrush&quot; Value&#x3D;&quot;Transparent&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;Style&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>XAML中使用</p>
<p>直接在TextBlock 中使用即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot;&gt;</span><br><span class="line">    &lt;TextBlock Text&#x3D;&quot;&amp;#xe624;&quot; FontSize&#x3D;&quot;50&quot; FontFamily&#x3D;&quot;Resources&#x2F;Fonts&#x2F;#iconfont&quot; Margin&#x3D;&quot;50 0 0 0&quot; VerticalAlignment&#x3D;&quot;Center&quot; Foreground&#x3D;&quot;Red&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextBlock Text&#x3D;&quot;&amp;#xe6e1;&quot; FontSize&#x3D;&quot;50&quot; FontFamily&#x3D;&quot;Resources&#x2F;Fonts&#x2F;#iconfont&quot; Margin&#x3D;&quot;50 0 0 0&quot; VerticalAlignment&#x3D;&quot;Center&quot; Foreground&#x3D;&quot;Black&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextBlock Text&#x3D;&quot;&amp;#xe623;&quot; FontSize&#x3D;&quot;40&quot; FontFamily&#x3D;&quot;Resources&#x2F;Fonts&#x2F;#iconfont&quot; Margin&#x3D;&quot;50 0 0 0&quot; VerticalAlignment&#x3D;&quot;Center&quot; Foreground&#x3D;&quot;Green&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;StackPanel&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/icon-4.png"></p>
</li>
</ol>
<ol start="3">
<li><p>C#代码使用示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码设置字体图标</span></span><br><span class="line"><span class="keyword">this</span> .ticon1.Text = <span class="string">&quot;&amp;#xe624;&quot;</span> ;</span><br><span class="line"><span class="keyword">this</span> .ticon2.Text = <span class="string">&quot;&amp;#xe624;&quot;</span> ;</span><br></pre></td></tr></table></figure>
<h3 id="四、如何下载字体文件"><a href="#四、如何下载字体文件" class="headerlink" title="四、如何下载字体文件"></a>四、如何下载字体文件</h3></li>
</ol>
<blockquote>
<p>以Iconfont来举例说明</p>
</blockquote>
<h3 id="4-1关于Iconfont"><a href="#4-1关于Iconfont" class="headerlink" title="4.1关于Iconfont"></a>4.1关于Iconfont</h3><blockquote>
<p>IconFont-阿里巴巴体验团队倾力打造，功能很强大且图标内容很丰富的矢量图标库，提供矢量图标下载、在线存储、格式转换等功能。</p>
<p>官网链接：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p>
</blockquote>
<h3 id="4-2-基本操作"><a href="#4-2-基本操作" class="headerlink" title="4.2 基本操作"></a>4.2 基本操作</h3><ol>
<li>登录Iconfont官网：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li>
<li>新建项目，将自己所需的icon添加到项目</li>
<li>然后下载到本地</li>
<li>将后缀为.tff的文件引入WPF项目</li>
</ol>
<h3 id="五、总结…"><a href="#五、总结…" class="headerlink" title="五、总结…"></a>五、总结…</h3><blockquote>
<p>前端路茫茫，我还是好好学习吧…😭</p>
<p>本站点所有内容仅记录自己一路走来的学习历程，如有错误，请多指正…😊</p>
</blockquote>
<h3 id="【参考链接】"><a href="#【参考链接】" class="headerlink" title="【参考链接】"></a>【参考链接】</h3><ul>
<li><a href="https://blog.csdn.net/mybelief321/article/details/102461597">WPF使用教程</a></li>
</ul>
]]></content>
      <categories>
        <category>Microsoft之旅</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Iconfont</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF学习笔记(一)入门基础</title>
    <url>/WPF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h1 id="WPF学习笔记-一-入门基础"><a href="#WPF学习笔记-一-入门基础" class="headerlink" title="WPF学习笔记(一)入门基础"></a>WPF学习笔记(一)入门基础</h1><h2 id="一、WPF概述"><a href="#一、WPF概述" class="headerlink" title="一、WPF概述"></a>一、WPF概述</h2><blockquote>
<p>为Windows创建具有视觉效果的用户体验的桌面客户端应用程序</p>
<p>WPF通过一系列全面的应用程序开发功能扩展了核心，这些功能包括可扩展应用程序标记语言（XAML），控件，数据绑定，布局，2D和3D图形，动画，样式，模板，文档，媒体，文本和版式</p>
</blockquote>
<h3 id="1-WPF项目生成的项目文件结构"><a href="#1-WPF项目生成的项目文件结构" class="headerlink" title="1. WPF项目生成的项目文件结构"></a>1. WPF项目生成的项目文件结构</h3><p><strong>打开Visual Studio2019 创建“WPF应用程序”，默认生成的文件结构如下图：</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/s.png" alt="文件结构"></p>
<p><strong>在App.xaml中的“StartupUri”属性可以指定项目运行时的启动窗体。还可以定义我们需要的系统资源以及引入程序集等如下图：</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/Snipaste_2020-01-03_16-19-01.png"></p>
<h3 id="2-命名空间"><a href="#2-命名空间" class="headerlink" title="2. 命名空间"></a>2. 命名空间</h3><p>在许多 XAML 文件的根标记中的命名空间声明内，通常可看到两个 XML 命名空间声明。 第一个声明默认映射整个 WPF 客户端/框架 XAML 命名空间：默认是没有前缀的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br></pre></td></tr></table></figure>
<p>第二个声明映射单独的 XAML 命名空间，（通常）将其映射到 <code>x:</code> 前缀。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-x-Class"><a href="#2-1-x-Class" class="headerlink" title="2.1 x:Class"></a>2.1 x:Class</h3><blockquote>
<p>这个Attribute作用是告诉XAML编译器将XAML标签的编译结果与后台代码中指定的类合并，在使用x:Class时必须遵循以下要求：</p>
</blockquote>
<ul>
<li>这个Attribute只用于根节点</li>
<li>使用x:Class的根节点的类型要与x:Class的值所指示的类型保持一致</li>
<li>x:Class的值所指示的类型在声明时必须使用partial关键字</li>
</ul>
<h3 id="2-2-x-ClassModifier"><a href="#2-2-x-ClassModifier" class="headerlink" title="2.2 x:ClassModifier"></a>2.2 x:ClassModifier</h3><blockquote>
<p>这个Attribute作用是告诉XAML编译由标签生成的类具有怎么样的访问控制级别.使用x:ClassModifier时需要注意事项：</p>
</blockquote>
<ul>
<li>标签必须具有 x:Class Attribute</li>
<li>x:ClassModifier的值必须与x:Class所指示类的访问控制级别一致</li>
<li>x:ClassModifier的值随后台代码的编译语言不同而有所不同，具体参看TypeAttributes枚举类型</li>
</ul>
<h3 id="2-3-x-Name"><a href="#2-3-x-Name" class="headerlink" title="2.3 x:Name"></a>2.3 x:Name</h3><blockquote>
<p>XAML标签是对象，一个XAML变迁对应着一个对象，这个对象一般是一个控件的实例。<br> 不带名称的XAML对象声明只负责声明对象而不负责为这些对象声明引用变量。<br> 如果我们需要为对象准备一个引用变量以便在C#代码中直接访问就必须显示告诉XAML编译器，为这个对象声明引用变量就要用到x:Name</p>
</blockquote>
<p><strong>x:Name的作用有两个：</strong></p>
<ul>
<li>告诉XAML编译器，当一个标签带有x:Name时除了为这个标签生成对应实例以外还要为这个实例声明一个引用变量，变量名就是x:Name的值</li>
<li>将XAML标签所对应对象的Name属性（如果有）也设置为x:Name的值，并把这个值注册到UI树上以方便查找</li>
</ul>
<blockquote>
<p><strong>Tips：在XAML代码中应该使用Name还是x:Name</strong><br> Name属性定义在FrameworkElement类中，这个类是WPF控件类的基类，所有的WPF控件都有Name这个属性。当一个元素具有Name属性时，使用Name或者x:Name效果是一样的。对于那些没有Name属性值的元素，为了在XAML声明时也创建引用变量以便在C#代码中访问，我们只能使用x:Name。</p>
</blockquote>
<h3 id="2-4-x-FieldModifier"><a href="#2-4-x-FieldModifier" class="headerlink" title="2.4 x:FieldModifier."></a>2.4 x:FieldModifier.</h3><blockquote>
<p>x:FieldModifier用来在XAML里改变引用变量访问级别</p>
</blockquote>
<ul>
<li>使用x:Name后XAML标签对应实例具有自己的引用变量，而且这些引用变量都是类的字段。默认情况下，这些字段的访问级别按照面向对象的封装原则被设置成internal。有时候我们需要从一个程序集访问另外一个程序集中窗体的元素，这个时候需要把访问控件的引用变量改为public级别。</li>
</ul>
<p><code>注意：因为x:FieldMOdifier是用来改变引用变量访问级别的，所有使用x:FieldModifer的前提是这个标签同时使用x:Name，否则无法通过Name来引用变量。</code></p>
<h2 id="二、WPF中的XAML"><a href="#二、WPF中的XAML" class="headerlink" title="二、WPF中的XAML"></a>二、WPF中的XAML</h2><blockquote>
<ol>
<li>XAML是基于XML的声明性标记语言，作为编程代码实例化和初始化对象</li>
<li>Xamarin.Forms 开发人员可以定义用户界面用作所有 Xamarin.Forms 视图、 布局和页面，以及自定义类。 可以编译或可执行文件中嵌入的 XAML 文件</li>
</ol>
</blockquote>
<h3 id="1-XAML的优缺点"><a href="#1-XAML的优缺点" class="headerlink" title="1. XAML的优缺点"></a>1. XAML的优缺点</h3><p>（1）优点：</p>
<ul>
<li>更简洁和可读性</li>
<li>XML中固有的父-子层次结构</li>
<li>可以轻松手动编写，也可以通过可视化设计工具生成      </li>
</ul>
<p>（2）缺点        </p>
<ol>
<li>XAML 不能包含代码。 必须在代码文件中定义所有事件处理程序。         </li>
<li>XAML 不能包含重复处理的循环。 (但是，最值得注意的是 ListView 可以生成多个子级中的对象基于其 ItemsSource 集合。)         </li>
<li>XAML 不能包含有条件处理（但是，数据绑定可以引用，可有效地处理某些条件的代码基于绑定转换器。         </li>
<li>XAML 通常无法实例化类未定义无参数构造函数。（但是，有时会解决此限制问题的方法。）         </li>
<li>XAML 通常不能调用方法。（同样，此限制可以有时克服。）</li>
</ol>
<h3 id="2-为对象属性赋值的方式"><a href="#2-为对象属性赋值的方式" class="headerlink" title="2. 为对象属性赋值的方式"></a>2. 为对象属性赋值的方式</h3><ul>
<li><p>利用Attribute=value的形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;直接写在标签内</span><br><span class="line">&lt;Button Width&#x3D;&quot;120&quot; Height&#x3D;&quot;30&quot; Grid.Row&#x3D;&quot;3&quot; &gt;</span><br><span class="line">    &lt;Rectangle  Width&#x3D;&quot;20&quot; Height&#x3D;&quot;20&quot; Stroke&#x3D;&quot;DarkBlue&quot; Fill&#x3D;&quot;LawnGreen&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;Button&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>属性标签的形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Window.Resources&gt;</span><br><span class="line">	&lt;style&gt;</span><br><span class="line">    	...</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;Window.Resources&gt;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&lt;Grid&gt;</span><br><span class="line">     &lt;Grid.ColumnDefinitions&gt; </span><br><span class="line">         &lt;ColumnDefinition &#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;Grid.ColumnDefinitions&gt;</span><br><span class="line">&lt;&#x2F;Grid&gt; </span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><code>标签扩展</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;TextBlock x:Name&#x3D;&quot;tb&quot; Text&#x3D;&quot;&#123;Binding ElementName&#x3D;sld,Path&#x3D;Value&#125;&quot; &#x2F;&gt;</span><br><span class="line">&lt;Slider x:Name&#x3D;&quot;sld&quot; Grid.Row&#x3D;&quot;4&quot; Value&#x3D;&quot;50&quot; Maximum&#x3D;&quot;100&quot; Minimum&#x3D;&quot;0&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="三、学习中…"><a href="#三、学习中…" class="headerlink" title="三、学习中…"></a>三、学习中…</h2><h2 id="链接…"><a href="#链接…" class="headerlink" title="链接…"></a>链接…</h2><ol>
<li>刘铁猛老师教学视频：<a href="https://www.bilibili.com/video/av38367210?from=search&seid=17560756528935135904">https://www.bilibili.com/video/av38367210?from=search&amp;seid=17560756528935135904</a></li>
</ol>
]]></content>
      <categories>
        <category>Microsoft之旅</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Microsoft</tag>
        <tag>XAML</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF学习笔记(三)WPF模板</title>
    <url>/WPF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89-WPF%E6%A8%A1%E6%9D%BF.html</url>
    <content><![CDATA[<h1 id="WPF学习笔记-三-WPF模板"><a href="#WPF学习笔记-三-WPF模板" class="headerlink" title="WPF学习笔记(三)WPF模板"></a>WPF学习笔记(三)WPF模板</h1><blockquote>
<p>WPF模板其实都是外观的表现形式，不管是控件模板、数据模板还是面板模板，其都是改变控件的表现形式。只不过这三种控件的作用点不一样罢了。</p>
<p>控件模板是针对于控件本身，修改它可以改变控件本身表现的样子；</p>
<p>数据模板针对控件的数据，修改它可以改变控件绑定的数据表现样子。既然是决定数据的表现，从而决定其一般应用于数据绑定控件，如ListBox、ListView等控件。</p>
<p>面板模板则针对于控件的布局，修改它可以影响控件的布局方式。</p>
</blockquote>
<h2 id="一、控件模板"><a href="#一、控件模板" class="headerlink" title="一、控件模板"></a>一、控件模板</h2><h3 id="1-控件模板与Style的异同"><a href="#1-控件模板与Style的异同" class="headerlink" title="1. 控件模板与Style的异同"></a>1. 控件模板与Style的异同</h3><blockquote>
<p>都是为了实现空间的个性化。</p>
<p>Style只能改变控件已有的属性（比如字体颜色等），但控件模板可以改变空间的内部结构（VisualTree，视觉树）来完成更为复杂的定制，比如我们可以定制一个带图片的按钮。</p>
</blockquote>
<h3 id="2-通过控件模板自定义控件外观"><a href="#2-通过控件模板自定义控件外观" class="headerlink" title="2. 通过控件模板自定义控件外观"></a>2. 通过控件模板自定义控件外观</h3><blockquote>
<p>WPF中每一个控件都有一个默认的模板，该模板描述了空间的外观以及外观对外界刺激所做出的反应;</p>
<p>我们也可以自定义一个模板来替换控件默认模板以便打造个性化的控件。</p>
</blockquote>
<p><strong>示例：</strong>制作一个圆形的按钮，当鼠标移入按钮后，会通过触发器使按钮背景变为红色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;!--定义控件模板，并用key标记--&gt;</span><br><span class="line">&lt;ControlTemplate x:Key&#x3D;&quot;ButtonTemplate&quot; TargetType&#x3D;&quot;Button&quot;&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Ellipse x:Name&#x3D;&quot;ell&quot; Fill&#x3D;&quot;Orange&quot; Height&#x3D;&quot;100&quot; Width&#x3D;&quot;100&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--使用模板绑定来绑定按钮的内容--&gt;</span><br><span class="line">        &lt;ContentPresenter Content&#x3D;&quot;&#123;TemplateBinding Button.Content&#125;&quot; 						  					  VerticalAlignment&#x3D;&quot;Center&quot; HorizontalAlignment&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Grid&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--定义模板触发器--&gt;</span><br><span class="line">    &lt;ControlTemplate.Triggers&gt;</span><br><span class="line">        &lt;Trigger Property&#x3D;&quot;IsMouseOver&quot; Value&#x3D;&quot;True&quot;&gt;</span><br><span class="line">            &lt;Setter TargetName&#x3D;&quot;ell&quot; Property&#x3D;&quot;Fill&quot; Value&#x3D;&quot;Red&quot; &#x2F;&gt;</span><br><span class="line">            &lt;Setter Property&#x3D;&quot;FontSize&quot; Value&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">            &lt;Setter Property&#x3D;&quot;Foreground&quot; Value&#x3D;&quot;White&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Trigger&gt;</span><br><span class="line">    &lt;&#x2F;ControlTemplate.Triggers&gt;</span><br><span class="line">&lt;&#x2F;ControlTemplate&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--引用--&gt;</span><br><span class="line"> &lt;Button Grid.Row&#x3D;&quot;1&quot; Name&#x3D;&quot;btn2&quot;                 </span><br><span class="line">         Content&#x3D;&quot;WPF&quot;                </span><br><span class="line">         Template&#x3D;&quot;&#123;StaticResource ButtonTemplate&#125;&quot;&gt;                </span><br><span class="line">&lt;&#x2F;Button&gt;</span><br></pre></td></tr></table></figure>
<p><strong>效果如下所示：</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/wpf-controll.png"></p>
<blockquote>
<p><strong>使用控件模板非常简单：</strong></p>
<ul>
<li><strong>首先在资源集合中创建一个ControlTemplate，并指定key标记</strong></li>
<li><strong>然后赋值到控件的Template属性中</strong></li>
</ul>
</blockquote>
<h2 id="二、数据模板"><a href="#二、数据模板" class="headerlink" title="二、数据模板"></a>二、数据模板</h2><h3 id="1-有两种类型的控件支持数据模板"><a href="#1-有两种类型的控件支持数据模板" class="headerlink" title="1. 有两种类型的控件支持数据模板"></a>1. 有两种类型的控件支持数据模板</h3><ul>
<li>内容控件通过ContentTemplate属性支持数据模板。内容模板用于显示任何放在Content属性中的内容。</li>
<li>列表控件，即继承自ItemsControl类的控件，通过ItemPlate属性支持数据模板。该模板用于显示由ItemSource提供集合中的每一项。</li>
</ul>
<h3 id="2-常用控件的三种类型"><a href="#2-常用控件的三种类型" class="headerlink" title="2. 常用控件的三种类型"></a>2. 常用控件的三种类型</h3><p><strong>如下图所示：</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/DataTemplate-0.png" alt="类型"></p>
<ol>
<li>Grid这种列表表格中修改Cell的数据格式, CellTemplate可以修改单元格的展示数据的方式。</li>
<li>针对列表类型的控件, 例如树形控件，下拉列表，列表控件, 可以修改其中的ItemTemplate。</li>
<li>修改ContentTemplate, 例UserControl控件的数据展现形式。</li>
</ol>
<h3 id="2-1-CellTemplate-模板"><a href="#2-1-CellTemplate-模板" class="headerlink" title="2.1 CellTemplate 模板"></a>2.1 CellTemplate 模板</h3><p><strong>示例：</strong>实现一个DataGrid 展示一个普通的数据表, 同时新增一列<strong>CellTemplate</strong>添加两个自定义的按钮。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Grid&gt;</span><br><span class="line">    &lt;DataGrid Name&#x3D;&quot;gd&quot; AutoGenerateColumns&#x3D;&quot;False&quot; CanUserSortColumns&#x3D;&quot;True&quot;  						  				  	  CanUserAddRows&#x3D;&quot;False&quot;&gt;</span><br><span class="line">        &lt;DataGrid.Columns&gt;</span><br><span class="line">            &lt;DataGridTextColumn Binding&#x3D;&quot;&#123;Binding UserName&#125;&quot; Width&#x3D;&quot;100&quot; Header&#x3D;&quot;学生姓名&quot;&#x2F;&gt;</span><br><span class="line">            &lt;DataGridTextColumn Binding&#x3D;&quot;&#123;Binding ClassName&#125;&quot; Width&#x3D;&quot;100&quot; Header&#x3D;&quot;班级名称&quot;&#x2F;&gt;</span><br><span class="line">            &lt;DataGridTextColumn Binding&#x3D;&quot;&#123;Binding Address&#125;&quot; Width&#x3D;&quot;200&quot; Header&#x3D;&quot;地址&quot;&#x2F;&gt;</span><br><span class="line">            &lt;DataGridTemplateColumn Header&#x3D;&quot;操作&quot; Width&#x3D;&quot;100&quot; &gt;</span><br><span class="line">                &lt;DataGridTemplateColumn.CellTemplate&gt;</span><br><span class="line">                    &lt;DataTemplate&gt;</span><br><span class="line">                        &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot; VerticalAlignment&#x3D;&quot;Center&quot; 														HorizontalAlignment&#x3D;&quot;Left&quot;&gt;</span><br><span class="line">                            &lt;Button Content&#x3D;&quot;编辑&quot;&#x2F;&gt;</span><br><span class="line">                            &lt;Button Margin&#x3D;&quot;8 0 0 0&quot; Content&#x3D;&quot;删除&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;StackPanel&gt;</span><br><span class="line">                    &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">                &lt;&#x2F;DataGridTemplateColumn.CellTemplate&gt;</span><br><span class="line">            &lt;&#x2F;DataGridTemplateColumn&gt;</span><br><span class="line">        &lt;&#x2F;DataGrid.Columns&gt;</span><br><span class="line">    &lt;&#x2F;DataGrid&gt;</span><br><span class="line">&lt;&#x2F;Grid&gt;</span><br></pre></td></tr></table></figure>
<p>在后台构造函数中进行该DataGrid进行数据绑定：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> List&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">students.Add(<span class="keyword">new</span> Student() &#123; UserName = <span class="string">&quot;小王&quot;</span>, ClassName = <span class="string">&quot;高二三班&quot;</span>, Address = <span class="string">&quot;广州市&quot;</span> &#125;);</span><br><span class="line">students.Add(<span class="keyword">new</span> Student() &#123; UserName = <span class="string">&quot;小李&quot;</span>, ClassName = <span class="string">&quot;高三六班&quot;</span>, Address = <span class="string">&quot;清远市&quot;</span> &#125;);</span><br><span class="line">students.Add(<span class="keyword">new</span> Student() &#123; UserName = <span class="string">&quot;小张&quot;</span>, ClassName = <span class="string">&quot;高一一班&quot;</span>, Address = <span class="string">&quot;深圳市&quot;</span> &#125;);</span><br><span class="line">students.Add(<span class="keyword">new</span> Student() &#123; UserName = <span class="string">&quot;小黑&quot;</span>, ClassName = <span class="string">&quot;高一三班&quot;</span>, Address = <span class="string">&quot;赣州市&quot;</span> &#125;);</span><br><span class="line">gd.ItemsSource = students;</span><br></pre></td></tr></table></figure>
<p>最终的效果, 在数据表格的最后一列, 将会在一列中分别生成 两个普通按钮：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/Data-Cell8.png"></p>
<h3 id="2-2-ItemTemplate-模板"><a href="#2-2-ItemTemplate-模板" class="headerlink" title="2.2 ItemTemplate 模板"></a>2.2 ItemTemplate 模板</h3><p>在列表的控件中, 常常会出现一些需求, 类似在下拉控件或树控件中添加一个 CheckBox选择框, 一个图标或图片, 这个时候, 我们就可以利用自定义的DataTemplate 来实现这个功能,</p>
<p>该示例来简单演示其功能, 利用 ListBox 和 ComboBox来绑定一个颜色代码列表, 同时展示其颜色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Page.Resources&gt;</span><br><span class="line">    &lt;DataTemplate x:Key&#x3D;&quot;comTemplate&quot;&gt;</span><br><span class="line">        &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot; Margin&#x3D;&quot;5,0&quot;&gt;</span><br><span class="line">            &lt;Border Width&#x3D;&quot;10&quot; Height&#x3D;&quot;10&quot; Background&#x3D;&quot;&#123;Binding Code&#125;&quot;&#x2F;&gt;</span><br><span class="line">            &lt;TextBlock Text&#x3D;&quot;&#123;Binding Code&#125;&quot; Margin&#x3D;&quot;5,0&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;StackPanel&gt;</span><br><span class="line">    &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">&lt;&#x2F;Page.Resources&gt;</span><br><span class="line">&lt;Grid&gt;</span><br><span class="line">    &lt;StackPanel Orientation&#x3D;&quot;Horizontal&quot; HorizontalAlignment&#x3D;&quot;Center&quot;&gt;</span><br><span class="line">        &lt;ComboBox Name&#x3D;&quot;cob&quot; Width&#x3D;&quot;120&quot; Height&#x3D;&quot;30&quot; ItemTemplate&#x3D;&quot;&#123;StaticResource comTemplate&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;ListBox Name&#x3D;&quot;lib&quot; Width&#x3D;&quot;120&quot; Height&#x3D;&quot;100&quot; Margin&#x3D;&quot;5,0&quot;  </span><br><span class="line">                 ItemTemplate&#x3D;&quot;&#123;StaticResource 		comTemplate&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;StackPanel&gt;</span><br><span class="line">&lt;&#x2F;Grid&gt;</span><br></pre></td></tr></table></figure>
<p>后台绑定代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;Color&gt; ColorList = <span class="keyword">new</span> List&lt;Color&gt;();</span><br><span class="line">ColorList.Add(<span class="keyword">new</span> Color() &#123; Code = <span class="string">&quot;#FF8C00&quot;</span> &#125;);</span><br><span class="line">ColorList.Add(<span class="keyword">new</span> Color() &#123; Code = <span class="string">&quot;#FF7F50&quot;</span> &#125;);</span><br><span class="line">ColorList.Add(<span class="keyword">new</span> Color() &#123; Code = <span class="string">&quot;#FF6EB4&quot;</span> &#125;);</span><br><span class="line">ColorList.Add(<span class="keyword">new</span> Color() &#123; Code = <span class="string">&quot;#FF4500&quot;</span> &#125;);</span><br><span class="line">ColorList.Add(<span class="keyword">new</span> Color() &#123; Code = <span class="string">&quot;#FF3030&quot;</span> &#125;);</span><br><span class="line">ColorList.Add(<span class="keyword">new</span> Color() &#123; Code = <span class="string">&quot;#CD5B45&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">cob.ItemsSource = ColorList;</span><br><span class="line">lib.ItemsSource = ColorList;</span><br></pre></td></tr></table></figure>
<p>最终测试效果如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/ItemTemplate.gif"></p>
<h3 id="2-3-ItemsControl"><a href="#2-3-ItemsControl" class="headerlink" title="2.3 ItemsControl"></a>2.3 ItemsControl</h3><blockquote>
<p>定义ItemsControl 主要分两个步骤: </p>
<ol>
<li>设置ItemsPanel容器, 用于容纳列表的最外层容器 </li>
<li>定义子项的DataTemplate</li>
</ol>
</blockquote>
<p><strong>示例代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ItemsControl Name&#x3D;&quot;ic&quot;&gt;</span><br><span class="line">    &lt;ItemsControl.ItemsPanel&gt;</span><br><span class="line">        &lt;ItemsPanelTemplate&gt;</span><br><span class="line">            &lt;WrapPanel Orientation&#x3D;&quot;Horizontal&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;ItemsPanelTemplate&gt;</span><br><span class="line">    &lt;&#x2F;ItemsControl.ItemsPanel&gt;</span><br><span class="line">&lt;!--ItemsControl的数据模板--&gt;</span><br><span class="line">	&lt;ItemsControl.ItemTemplate&gt;</span><br><span class="line">        &lt;DataTemplate&gt;</span><br><span class="line">            &lt;Button Width&#x3D;&quot;50&quot; Height&#x3D;&quot;50&quot; Content&#x3D;&quot;&#123;Binding Code&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">    &lt;&#x2F;ItemsControl.ItemTemplate&gt;</span><br><span class="line">&lt;&#x2F;ItemsControl&gt;</span><br></pre></td></tr></table></figure>
<p>最终效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/ItemControl.png"></p>
<blockquote>
<p><strong>通过以上示例可知，使用DataTemplate很简单：</strong></p>
<ul>
<li><strong>首先在资源集合中创建一个数据模板，并设置key标签。</strong></li>
<li><strong>然后将key赋值到控件的CellTemplate或ContentTemplate或ItemTemplate属性上即可。</strong></li>
</ul>
</blockquote>
<h3 id="3-数据模板与控件模板的关系"><a href="#3-数据模板与控件模板的关系" class="headerlink" title="3. 数据模板与控件模板的关系"></a>3. 数据模板与控件模板的关系</h3><p>控件只是数据和行为的载体，至于它本身长什么样子和数据长什么样子都是靠Template决定的。决定控件外观的是ControlTemplate，决定数据外观的是DataTemplate，它们正是<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.controls.control(v=vs.110).aspx">Control</a>类的Template和ContentTemplate两个属性的值。</p>
<p>一般来说，ControlTemplate内都有一个ContentPresenter，这个ContentPresenter的ContentTemplate就是DataTemplate类型。</p>
<h2 id="三、面板模板"><a href="#三、面板模板" class="headerlink" title="三、面板模板"></a>三、面板模板</h2><blockquote>
<p>ItemsPanelTemplate用于指定项的布局。 ItemsControl 类型具有一个类型为ItemsPanelTemplate 的 ItemsPanel 属性。</p>
</blockquote>
<p><strong>示例，部分代码如下：</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Grid Grid.Row&#x3D;&quot;2&quot;&gt;</span><br><span class="line">    &lt;ItemsControl ItemsSource&#x3D;&quot;&#123;Binding MenuModels&#125;&quot;&gt;</span><br><span class="line">        &lt;!--创建面板模板--&gt;</span><br><span class="line">        &lt;ItemsControl.ItemsPanel&gt;</span><br><span class="line">            &lt;ItemsPanelTemplate&gt;</span><br><span class="line">                &lt;StackPanel &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;ItemsPanelTemplate&gt;</span><br><span class="line">        &lt;&#x2F;ItemsControl.ItemsPanel&gt;</span><br><span class="line">        &lt;!--数据模板--&gt;</span><br><span class="line">        &lt;ItemsControl.ItemTemplate&gt;</span><br><span class="line">            &lt;DataTemplate&gt;</span><br><span class="line">                &lt;Border CornerRadius&#x3D;&quot;3&quot; Margin&#x3D;&quot;40 2 40 0&quot; Background&#x3D;&quot;White&quot; Height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">                    &lt;Grid&gt;</span><br><span class="line">                        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">                            &lt;ColumnDefinition Width&#x3D;&quot;50&quot; &#x2F;&gt;</span><br><span class="line">                            &lt;ColumnDefinition &#x2F;&gt;</span><br><span class="line">                            &lt;ColumnDefinition Width&#x3D;&quot;50&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;Grid.ColumnDefinitions&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;TextBlock Text&#x3D;&quot;⚪&quot; FontSize&#x3D;&quot;20&quot; HorizontalAlignment&#x3D;&quot;Center&quot; 														   VerticalAlignment&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;StackPanel Grid.Column&#x3D;&quot;1&quot; VerticalAlignment&#x3D;&quot;Center&quot;&gt;</span><br><span class="line">                            &lt;TextBlock Text&#x3D;&quot;123456&quot; &#x2F;&gt;</span><br><span class="line">                            &lt;TextBlock Text&#x3D;&quot;任务&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;StackPanel&gt;</span><br><span class="line">                        &lt;TextBlock Grid.Column&#x3D;&quot;2&quot; Text&#x3D;&quot;☆&quot; FontSize&#x3D;&quot;20&quot; HorizontalAlignment&#x3D;&quot;Center&quot; 										   VerticalAlignment&#x3D;&quot;Center&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;Grid&gt;</span><br><span class="line">                &lt;&#x2F;Border&gt;</span><br><span class="line">            &lt;&#x2F;DataTemplate&gt;</span><br><span class="line">        &lt;&#x2F;ItemsControl.ItemTemplate&gt;</span><br><span class="line">    &lt;&#x2F;ItemsControl&gt;</span><br><span class="line">&lt;&#x2F;Grid&gt;</span><br></pre></td></tr></table></figure>
<p>最终效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/image-20200110113158163.png"></p>
<h2 id="四、总结…"><a href="#四、总结…" class="headerlink" title="四、总结…"></a>四、总结…</h2><blockquote>
<p>WPF模板的内容就简单的了解到这儿，使用这些模板的方式<strong>都是先定义一个模板，然后在把对应的key应用到控件对应的属性中。对于控件模板，应用的是控件的Template；对于数据模板，应用的是控件的ItemTemplate属性；对于面板模板，应用的是控件的ItemsPanel属性</strong></p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>深入解析WPF模板：<a href="https://www.cnblogs.com/zhili/p/WPFTemplate.html#3095341">https://www.cnblogs.com/zhili/p/WPFTemplate.html#3095341</a></li>
</ul>
]]></content>
      <categories>
        <category>Microsoft之旅</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF学习笔记(二)资源与触发器</title>
    <url>/WPF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E8%B5%84%E6%BA%90%E4%B8%8E%E8%A7%A6%E5%8F%91%E5%99%A8.html</url>
    <content><![CDATA[<h1 id="WPF学习笔记-二-资源与触发器"><a href="#WPF学习笔记-二-资源与触发器" class="headerlink" title="WPF学习笔记(二)资源与触发器"></a>WPF学习笔记(二)资源与触发器</h1><h2 id="一、WPF资源"><a href="#一、WPF资源" class="headerlink" title="一、WPF资源"></a>一、WPF资源</h2><blockquote>
<p>WPF资源系统可以用来保存一些公有对象和样式，从而实现重用这些对象和样式的作用。而WPF样式是重用元素的格式的重要手段，可以理解样式就如CSS一样，尽管我们可以在每个控件中定义格式，但是如果多个控件都应用了多个格式的时候，我们就可以把这些格式封装成格式，然后在资源中定义这个格式，之前如果用到这个格式就可以直接使用这个样式，从而达到重用格式的手段。从中可以发现，WPF资源和WPF样式是相关的，我们经常把样式定义在资源中。</p>
</blockquote>
<h3 id="1-1-资源基础介绍"><a href="#1-1-资源基础介绍" class="headerlink" title="1.1 资源基础介绍"></a>1.1 资源基础介绍</h3><blockquote>
<p>我们可以在代码中创建和操作资源，但通常都是以XAML标签的形式定义资源的。</p>
</blockquote>
<p>具体的XAML代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class&#x3D;&quot;WpfApp1.Execise&quot;</span><br><span class="line">        xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">        xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br><span class="line">        xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;</span><br><span class="line">        xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;</span><br><span class="line">        xmlns:local&#x3D;&quot;clr-namespace:WpfApp1&quot;</span><br><span class="line">        mc:Ignorable&#x3D;&quot;d&quot;</span><br><span class="line">        Title&#x3D;&quot;Execise&quot; Height&#x3D;&quot;450&quot; Width&#x3D;&quot;800&quot;&gt;</span><br><span class="line">    &lt;!--定义资源--&gt;</span><br><span class="line">    &lt;Window.Resources&gt;</span><br><span class="line">        &lt;SolidColorBrush x:Key&#x3D;&quot;Button1&quot; Color&#x3D;&quot;Red&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Window.Resources&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;!--通过资源key来对资源进行使用--&gt;</span><br><span class="line">        &lt;Button Foreground&#x3D;&quot;&#123;StaticResource Button1&#125;&quot; Width&#x3D;&quot;100&quot; Height&#x3D;&quot;100&quot; Content&#x3D;&quot;Hello&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Grid&gt;</span><br><span class="line">&lt;&#x2F;Window&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/wpf-0.png"></p>
<h3 id="1-2-静态资源和动态资源的区别"><a href="#1-2-静态资源和动态资源的区别" class="headerlink" title="1.2 静态资源和动态资源的区别"></a>1.2 静态资源和动态资源的区别</h3><blockquote>
<p>为了使用XAML标记中的资源，需要一种引用资源的方法，可以通过两个标记来进行引用资源：一个用于静态资源，另一个用于动态资源。在上面的XAML中，我们引用的方式就是静态资源的引用方式，因为我们指定了<strong>StaticResource。</strong></p>
<p>对于静态资源在第一次创建窗口时，一次性地设置完毕；而对于动态资源，如果发生了改变，则会重新应用资源。</p>
</blockquote>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Window.Resources&gt;</span><br><span class="line">    &lt;SolidColorBrush x:Key&#x3D;&quot;RedBrush&quot; Color&#x3D;&quot;Red&quot;&gt;&lt;&#x2F;SolidColorBrush&gt;</span><br><span class="line">&lt;&#x2F;Window.Resources&gt;</span><br><span class="line"></span><br><span class="line">&lt;StackPanel Margin&#x3D;&quot;5&quot;&gt;</span><br><span class="line">    &lt;Button Background&#x3D;&quot;&#123;StaticResource RedBrush&#125;&quot; Margin&#x3D;&quot;5&quot; FontSize&#x3D;&quot;14&quot; Content&#x3D;&quot;Use a Static Resource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;Button Background&#x3D;&quot;&#123;DynamicResource RedBrush&#125;&quot; Margin&#x3D;&quot;5&quot; FontSize&#x3D;&quot;14&quot; Content&#x3D;&quot;Use a Dynamic Resource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;Button Margin&#x3D;&quot;5&quot; FontSize&#x3D;&quot;14&quot; Content&#x3D;&quot;Change the RedBrush to Yellow&quot; Click&#x3D;&quot;ChangeBrushToYellow_Click&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;StackPanel&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--后台代码--&gt;</span><br><span class="line">private void ChangeBrushToYellow_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 改变资源</span><br><span class="line">    this.Resources[&quot;RedBrush&quot;] &#x3D; new SolidColorBrush(Colors.Yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击按钮，只会改变动态引用资源的背景色，静态资源并没有改变。效果图如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/Snipaste_2020-01-06_15-54-31.png"></p>
<h3 id="1-3-资源字典"><a href="#1-3-资源字典" class="headerlink" title="1.3 资源字典"></a>1.3 资源字典</h3><blockquote>
<p>每个<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.frameworkelement.resources(v=vs.100).aspx">Resources</a>属性存储着一个资源字典集合。如果希望在多个项目之间共享资源的话，就可以创建一个资源字典。</p>
</blockquote>
<p>资源字段是一个简单的XAML文档，该文档就是用于存储资源的，可以通过右键项目-&gt;添加资源字典的方式来添加一个资源字典文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ResourceDictionary xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">                    xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br><span class="line">                    xmlns:local&#x3D;&quot;clr-namespace:WpfApp1&quot;&gt;</span><br><span class="line">    &lt;SolidColorBrush x:Key&#x3D;&quot;blueBrush&quot; Color&#x3D;&quot;Blue&quot;&#x2F;&gt;</span><br><span class="line">    &lt;FontWeight x:Key&#x3D;&quot;fontWeight&quot;&gt;Bold&lt;&#x2F;FontWeight&gt;</span><br><span class="line">&lt;&#x2F;ResourceDictionary&gt;</span><br></pre></td></tr></table></figure>
<p>为了使用资源字典，需要将其合并到应用程序中资源集合位置，当然你也可以合并到窗口资源集合中，但是通常是合并到应用程序资源集合中，因为资源字典的目的就是在于多个窗体中共享，具体的XAML代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Application x:Class&#x3D;&quot;WpfApp1.App&quot;</span><br><span class="line">             xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br><span class="line">             xmlns:local&#x3D;&quot;clr-namespace:WpfApp1&quot;</span><br><span class="line">             StartupUri&#x3D;&quot;Execise.xaml&quot;&gt;</span><br><span class="line">    &lt;Application.Resources&gt;</span><br><span class="line">        &lt;!--合并资源字典到Application.Resources中--&gt;</span><br><span class="line">        &lt;ResourceDictionary&gt;</span><br><span class="line">            &lt;ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">                &lt;ResourceDictionary Source&#x3D;&quot;Dictionary1.xaml&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;ResourceDictionary.MergedDictionaries&gt;</span><br><span class="line">        &lt;&#x2F;ResourceDictionary&gt;</span><br><span class="line">    &lt;&#x2F;Application.Resources&gt;</span><br><span class="line">&lt;&#x2F;Application&gt;</span><br></pre></td></tr></table></figure>
<p>使用方式与引用资源的方式是一样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class&#x3D;&quot;WpfApp1.Execise&quot;</span><br><span class="line">        xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;</span><br><span class="line">        xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;</span><br><span class="line">        xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;</span><br><span class="line">        xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;</span><br><span class="line">        xmlns:local&#x3D;&quot;clr-namespace:WpfApp1&quot;</span><br><span class="line">        mc:Ignorable&#x3D;&quot;d&quot;</span><br><span class="line">        Title&#x3D;&quot;Execise&quot; Height&#x3D;&quot;450&quot; Width&#x3D;&quot;800&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Window.Resources&gt;</span><br><span class="line">        &lt;SolidColorBrush x:Key&#x3D;&quot;RedBrush&quot; Color&#x3D;&quot;Red&quot;&gt;&lt;&#x2F;SolidColorBrush&gt;</span><br><span class="line">    &lt;&#x2F;Window.Resources&gt;</span><br><span class="line"></span><br><span class="line">    &lt;StackPanel Margin&#x3D;&quot;5&quot;&gt;</span><br><span class="line">        &lt;!--使用资源字典中定义的资源--&gt;</span><br><span class="line">        &lt;Button  Margin&#x3D;&quot;10&quot; Background&#x3D;&quot;&#123;StaticResource blueBrush&#125;&quot; Content&#x3D;&quot;Blue Button&quot; FontWeight&#x3D;&quot;&#123;StaticResource fontWeight&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;StackPanel&gt;</span><br><span class="line">&lt;&#x2F;Window&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最终运行效果如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/wpf-02.png"></p>
<h2 id="二、触发器Trigger"><a href="#二、触发器Trigger" class="headerlink" title="二、触发器Trigger"></a>二、触发器Trigger</h2><blockquote>
<p>触发器，应用属性值或有条件地执行操作；<br> 1）触发源：控件；<br> 2）触发条件：某属性为某个值，或执行某个事件时；<br> 3）执行操作：更改某个属性值或执行某个事件；</p>
</blockquote>
<blockquote>
<p> 触发器是通过Style.Triggers集合链接到样式。每个样式都可以有任意多个触发器，而且每个触发器都是System.Windows.TriggerBase的派生类的集合。</p>
</blockquote>
<h2 id="三、触发器的分类"><a href="#三、触发器的分类" class="headerlink" title="三、触发器的分类"></a>三、触发器的分类</h2><blockquote>
<p>1）根据触发器的触发条件，在 WPF 中，触发器的形态可以是：Trigger、DataTrigger、EventTrigger；</p>
<p>2）以及由 Trigger 延伸的 MultiTrigger 和由 DataTrigger 延伸的 MultiDataTrigger；</p>
</blockquote>
<h3 id="3-1-Trigger"><a href="#3-1-Trigger" class="headerlink" title="3.1 Trigger"></a>3.1 Trigger</h3><blockquote>
<p>Trigger 是最简单的触发器，主要用于监测依赖项属性的变化，然后使用设置器改变样式</p>
</blockquote>
<p>实例：当鼠标移动到按钮时，按钮内容变为红色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Window.Resources&gt;</span><br><span class="line">    &lt;Style x:Key&#x3D;&quot;Buttonstyle&quot; TargetType&#x3D;&quot;Button&quot;&gt;</span><br><span class="line">        &lt;Style.Triggers&gt;</span><br><span class="line">            &lt;Trigger Property&#x3D;&quot;IsMouseOver&quot; Value&#x3D;&quot;True&quot;&gt;</span><br><span class="line">                &lt;Setter Property&#x3D;&quot;FontSize&quot; Value&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">                &lt;Setter Property&#x3D;&quot;Foreground&quot; Value&#x3D;&quot;Red&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Trigger&gt;</span><br><span class="line">        &lt;&#x2F;Style.Triggers&gt;</span><br><span class="line">    &lt;&#x2F;Style&gt;</span><br><span class="line">&lt;&#x2F;Window.Resources&gt;</span><br><span class="line"></span><br><span class="line">&lt;StackPanel Margin&#x3D;&quot;5&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button Width&#x3D;&quot;200&quot; Height&#x3D;&quot;100&quot;  Margin&#x3D;&quot;10&quot; Content&#x3D;&quot;Hello WPF&quot; Style&#x3D;&quot;&#123;StaticResource Buttonstyle&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;StackPanel&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/trriger.gif"></p>
<h3 id="3-2-DataTrigger"><a href="#3-2-DataTrigger" class="headerlink" title="3.2 DataTrigger"></a>3.2 DataTrigger</h3><blockquote>
<p>该触发器使用数据绑定。与Trigger类似，只不过监视的是任意绑定数据的变化</p>
</blockquote>
<h3 id="3-3-EventTrigger"><a href="#3-3-EventTrigger" class="headerlink" title="3.3 EventTrigger"></a>3.3 EventTrigger</h3><blockquote>
<p>这是最复杂的触发器，当事件发生时，这种触发器应用动画</p>
</blockquote>
<p>示例：触发一个动画事件，当鼠标移入的时候，字体变大</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Style.Triggers&gt;    </span><br><span class="line">    &lt;EventTrigger RoutedEvent&#x3D;&quot;Mouse.MouseEnter&quot;&gt;</span><br><span class="line">        &lt;!--异步的动画--&gt;</span><br><span class="line">        &lt;BeginStoryboard&gt;</span><br><span class="line">            &lt;Storyboard&gt;</span><br><span class="line">                &lt;DoubleAnimation Duration&#x3D;&quot;0:0:1&quot; Storyboard.TargetProperty&#x3D;&quot;FontSize&quot; 									 From&#x3D;&quot;10&quot; To&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Storyboard&gt;</span><br><span class="line">        &lt;&#x2F;BeginStoryboard&gt;</span><br><span class="line">    &lt;&#x2F;EventTrigger&gt;</span><br><span class="line">&lt;&#x2F;Style.Triggers&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下：<img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/trriger3.gif"></p>
<h3 id="3-4-MultiTrigger"><a href="#3-4-MultiTrigger" class="headerlink" title="3.4 MultiTrigger"></a>3.4 MultiTrigger</h3><blockquote>
<p>与Trigger类似，但这种触发器联合了多个条件。只有满足了所有这些条件，才会启动触发器</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Window.Resources&gt;</span><br><span class="line">    &lt;Style x:Key&#x3D;&quot;Buttonstyle&quot; TargetType&#x3D;&quot;Button&quot;&gt;</span><br><span class="line">        &lt;Style.Triggers&gt;</span><br><span class="line">            &lt;MultiTrigger&gt;</span><br><span class="line">                &lt;MultiTrigger.Conditions&gt;</span><br><span class="line">                    &lt;Condition Property&#x3D;&quot;IsMouseOver&quot; Value&#x3D;&quot;True&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;Condition Property&#x3D;&quot;IsFocused&quot; Value&#x3D;&quot;True&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;MultiTrigger.Conditions&gt;</span><br><span class="line">                &lt;MultiTrigger.Setters&gt;</span><br><span class="line">                    &lt;Setter Property&#x3D;&quot;Foreground&quot; Value&#x3D;&quot;Red&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;Setter Property&#x3D;&quot;FontSize&quot; Value&#x3D;&quot;30&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;MultiTrigger.Setters&gt;</span><br><span class="line">            &lt;&#x2F;MultiTrigger&gt;</span><br><span class="line">            &lt;!--&lt;Trigger Property&#x3D;&quot;IsMouseOver&quot; Value&#x3D;&quot;True&quot;&gt;</span><br><span class="line">                    &lt;Setter Property&#x3D;&quot;FontSize&quot; Value&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;Setter Property&#x3D;&quot;Foreground&quot; Value&#x3D;&quot;Red&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Trigger&gt;--&gt;</span><br><span class="line">        &lt;&#x2F;Style.Triggers&gt;</span><br><span class="line">    &lt;&#x2F;Style&gt;</span><br><span class="line">&lt;&#x2F;Window.Resources&gt;</span><br></pre></td></tr></table></figure>
<p>当鼠标移入按钮，并获取焦点时，文字才会变红；效果如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/trriger2.gif"></p>
<h3 id="3-5-MultiDataTrigger"><a href="#3-5-MultiDataTrigger" class="headerlink" title="3.5 MultiDataTrigger"></a>3.5 MultiDataTrigger</h3><blockquote>
<p>联合多个数据触发器</p>
</blockquote>
<h2 id="链接…"><a href="#链接…" class="headerlink" title="链接…"></a>链接…</h2><p>B站视频：<a href="https://www.bilibili.com/video/av70392459?p=4">https://www.bilibili.com/video/av70392459?p=4</a></p>
]]></content>
      <categories>
        <category>Microsoft之旅</category>
        <category>WPF</category>
      </categories>
      <tags>
        <tag>WPF</tag>
        <tag>Microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客常用命令</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<h2 id="一-引言"><a href="#一-引言" class="headerlink" title="一. 引言"></a>一. 引言</h2><blockquote>
<p>本文记录了Hexo博客搭建过程中常用的一些命令，以及自己平时写博客过程中频繁使用的几个命令。因为我发现自己偶尔会犯混，所以在此简洁的记录一下，防止日后又一顿虎操作。。。😔</p>
</blockquote>
<h2 id="二-Hexo常用命令"><a href="#二-Hexo常用命令" class="headerlink" title="二. Hexo常用命令"></a>二. Hexo常用命令</h2><h3 id="1-init"><a href="#1-init" class="headerlink" title="1. init"></a>1. init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="2-new（重要）"><a href="#2-new（重要）" class="headerlink" title="2. new（重要）"></a>2. new（重要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;post title with whitespace&quot;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--path</code></td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left"><code>-r</code>, <code>--replace</code></td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--slug</code></td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page --path about/me <span class="string">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure>
<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>
<p><code>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure>
<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>
<h3 id="3-generate（重要）"><a href="#3-generate（重要）" class="headerlink" title="3. generate（重要）"></a>3. generate（重要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>, <code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>, <code>--force</code></td>
<td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td align="left"><code>-c</code>, <code>--concurrency</code></td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<h3 id="4-publish"><a href="#4-publish" class="headerlink" title="4. publish"></a>4. publish</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p>发表草稿。</p>
<h3 id="5-server（重要）"><a href="#5-server（重要）" class="headerlink" title="5. server（重要）"></a>5. server（重要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h3 id="6-deploy（重要）"><a href="#6-deploy（重要）" class="headerlink" title="6. deploy（重要）"></a>6. deploy（重要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自己的博客中引入了豆瓣插件，由于该指令会与hexo-douban冲突，所以该指令不能使用简写形式，只能使用全称… </p>
</blockquote>
<h3 id="7-render"><a href="#7-render" class="headerlink" title="7. render"></a>7. render</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>
<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>, <code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h3 id="8-migrate"><a href="#8-migrate" class="headerlink" title="8. migrate"></a>8. migrate</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure>
<p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p>
<h3 id="9-clean（重要）"><a href="#9-clean（重要）" class="headerlink" title="9. clean（重要）"></a>9. clean（重要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="10-list"><a href="#10-list" class="headerlink" title="10. list"></a>10. list</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure>
<p>列出网站资料。</p>
<h3 id="11-version"><a href="#11-version" class="headerlink" title="11. version"></a>11. version</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>
<p>显示 Hexo 版本。</p>
<h2 id="三-选项"><a href="#三-选项" class="headerlink" title="三. 选项"></a>三. 选项</h2><h3 id="1-安全模式"><a href="#1-安全模式" class="headerlink" title="1. 安全模式"></a>1. 安全模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>
<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h3 id="2-调试模式"><a href="#2-调试模式" class="headerlink" title="2. 调试模式"></a>2. 调试模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>
<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p>
<h3 id="3-简洁模式"><a href="#3-简洁模式" class="headerlink" title="3. 简洁模式"></a>3. 简洁模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>
<p>隐藏终端信息。</p>
<h3 id="4-自定义配置文件的路径"><a href="#4-自定义配置文件的路径" class="headerlink" title="4. 自定义配置文件的路径"></a>4. 自定义配置文件的路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>
<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span></span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>
<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>
<h3 id="5-显示草稿"><a href="#5-显示草稿" class="headerlink" title="5. 显示草稿"></a>5. 显示草稿</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>
<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
<h3 id="6-自定义-CWD"><a href="#6-自定义-CWD" class="headerlink" title="6. 自定义 CWD"></a>6. 自定义 CWD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>
<p>自定义当前工作目录（Current working directory）的路径。</p>
<h2 id="四-更新中…"><a href="#四-更新中…" class="headerlink" title="四. 更新中…"></a>四. 更新中…</h2><blockquote>
<p>后续有用到的新指令，会及时更新过来，毕竟…我真的很健忘！！😭</p>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>2019</tag>
        <tag>指令</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<h2 id="WEB前端性能优化总结"><a href="#WEB前端性能优化总结" class="headerlink" title="WEB前端性能优化总结"></a>WEB前端性能优化总结</h2><blockquote>
<p>各种前端性能优化问题</p>
</blockquote>
<h3 id="1-图片优化"><a href="#1-图片优化" class="headerlink" title="1. 图片优化"></a>1. 图片优化</h3><ul>
<li><p>在保证图片质量的情况下，压缩图片，减少图片大小</p>
</li>
<li><p>使用Css3、svg、iconfont代替图片</p>
</li>
<li><p>首次加载不大于1024KB的图片</p>
</li>
<li><p>图片宽不大于640px(移动端)</p>
</li>
</ul>
<h3 id="2-脚本优化"><a href="#2-脚本优化" class="headerlink" title="2. 脚本优化"></a>2. 脚本优化</h3><ul>
<li><p>减少重回和回流操作</p>
</li>
<li><p>使用事件委托，避免批量绑定事件</p>
</li>
<li><p>尽量使用ID选择器</p>
</li>
<li><p>使用touch事件代替click事件</p>
</li>
<li><p>使用节流函数减少性能消耗</p>
</li>
</ul>
<h3 id="3-HTML优化"><a href="#3-HTML优化" class="headerlink" title="3. HTML优化"></a>3. HTML优化</h3><ul>
<li><p>css文件写在头部，javascript放在尾部</p>
</li>
<li><p>避免层级深嵌套</p>
</li>
<li><p>避免img、iframe、a等元素的空src</p>
</li>
<li><p>避免行内样式和事件绑定</p>
</li>
<li><p>大图片避免使用base64</p>
</li>
</ul>
<h3 id="4-CSS优化"><a href="#4-CSS优化" class="headerlink" title="4. CSS优化"></a>4. CSS优化</h3><ul>
<li>移除空的css规则</li>
<li>正确使用display的属性</li>
<li>不滥用float</li>
<li>不声明过多的font-size</li>
<li>值为0时不要使用单位</li>
<li>标准化各种浏览器前缀</li>
</ul>
<h3 id="4-渲染优化"><a href="#4-渲染优化" class="headerlink" title="4. 渲染优化"></a>4. 渲染优化</h3><ul>
<li>HTML使用viewport(移动端)</li>
<li>减少DOM节点</li>
<li>尽量使用CSS3 3d动画来触发GPU渲染</li>
<li>使用requestAnimationFrame代替setTimeInter和setTimeout</li>
<li>适当使用canvas动画</li>
<li>对于resize、mousemove事件使用节流处理，较少DOM回流和重绘次数</li>
</ul>
<h3 id="5-优化网络链接"><a href="#5-优化网络链接" class="headerlink" title="5. 优化网络链接"></a>5. 优化网络链接</h3><ul>
<li>使用CDN</li>
<li>使用DNA预解析</li>
</ul>
<h3 id="6-资源加载时机"><a href="#6-资源加载时机" class="headerlink" title="6. 资源加载时机"></a>6. 资源加载时机</h3><ol>
<li><p>异步script标签</p>
<ul>
<li>defer: 异步加载，在HTML解析完成后执行。defer的实际效果与将代码放在body底部类似</li>
<li>async: 异步加载，加载完成后立即执行</li>
</ul>
</li>
<li><p>模块按需加载</p>
<ul>
<li>在SPA等业务逻辑比较复杂的系统中，需要根据路由来加载当前页面需要的业务模块</li>
<li>按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把代码在一些逻辑断点处分离开，然后在一些<br>代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载</li>
<li>webpack 提供了两个类似的技术，优先选择的方式是使用符合 ECMAScript 提案 的 import() 语法。第二种则是使用 webpack 特定的 require.ensure</li>
</ul>
</li>
<li><p>使用资源预加载preload和资源预读取prefetch</p>
<ul>
<li>preload让浏览器提前加载指定资源，需要执行时再执行，可以加速本页面的加载速度</li>
<li>prefetch告诉浏览器加载下一页面可能会用到的资源，可以加速下一个页面的加载速度</li>
</ul>
</li>
<li><p>资源懒加载与资源预加载</p>
<ul>
<li>资源延迟加载也称为懒加载，延迟加载资源或符合某些条件时才加载某些资源</li>
<li>资源预加载是提前加载用户所需的资源，保证良好的用户体验</li>
<li>资源懒加载和资源预加载都是一种错峰操作，在浏览器忙碌的时候不做操作，浏览器空间时，再加载资源，优化了网络性能</li>
</ul>
</li>
</ol>
<h3 id="【参考】"><a href="#【参考】" class="headerlink" title="【参考】"></a>【参考】</h3><ul>
<li><a href="https://www.cnblogs.com/xiaohuochai/p/9178390.html">前端性能优化的七大手段</a></li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>微软Blazor框架学习笔记(一)</title>
    <url>/%E5%BE%AE%E8%BD%AFBlazor%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80.html</url>
    <content><![CDATA[<h2 id="微软Blazor框架学习笔记-一"><a href="#微软Blazor框架学习笔记-一" class="headerlink" title="微软Blazor框架学习笔记(一)"></a>微软Blazor框架学习笔记(一)</h2><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><strong>Blazor是一个用于使用 .NET生成交互式客户端 Web UI 的框架：</strong></p>
<ul>
<li>使用C#代替JavaScript来创建丰富的交互式UI；</li>
<li>共享使用.NET编写的服务器端和客户端应用逻辑；</li>
<li>将UI呈现为HTML和CSS，以支持众多浏览器，其中包括移动浏览器。</li>
</ul>
<p><strong>使用.NET进行客户端web开发可提供以下优势</strong>：</p>
<ul>
<li>使用C#代替JavaScript来编写代码；</li>
<li>利用现有的.NET的性能、可靠性和安全性；</li>
<li>始终高效支持Windows、Linux、macOS上的Visual Studio；</li>
<li>以一组稳定、功能丰富且易用的通用语言、框架和工具为基础来生成。</li>
</ul>
<h2 id="二、托管模型"><a href="#二、托管模型" class="headerlink" title="二、托管模型"></a>二、托管模型</h2><h3 id="Blazor-WebAssembly"><a href="#Blazor-WebAssembly" class="headerlink" title="Blazor WebAssembly"></a>Blazor WebAssembly</h3><ul>
<li>是一个单页面应用框架，用于使用 .NET 生成交互式客户端 Web 应用。 Blazor WebAssembly 使用开放的 Web 标准（没有插件或代码转换），并且适用于所有新式 Web 浏览器（包括移动浏览器）</li>
<li>Blazor 的主体托管模型在 WebAssembly 上的浏览器中运行客户端Blazor WebAssembly 托管模型具有以下几个优点：<ul>
<li>没有 .NET 服务器端依赖项。 应用在下载到客户端之后完全正常运行。</li>
<li>完全利用客户端资源和功能。</li>
<li>工作从服务器卸载到客户端。</li>
<li>不需要 <a href="http://asp.net/">ASP.NET</a> Core web 服务器来托管应用程序。 无服务器部署方案可能（例如，通过 CDN 提供应用）。</li>
</ul>
</li>
<li>Blazor WebAssembly 托管的缺点：<ul>
<li>应用程序限制为浏览器的功能。</li>
<li>需要支持的客户端硬件和软件（例如，WebAssembly 支持）。</li>
<li>下载大小较大，应用需要较长时间才能加载。</li>
<li>.NET 运行时和工具支持不太成熟。 例如， .NET Standard支持和调试中存在限制。</li>
</ul>
</li>
</ul>
<h3 id="Blazor-服务器"><a href="#Blazor-服务器" class="headerlink" title="Blazor 服务器"></a>Blazor 服务器</h3><ul>
<li>使用 Blazor 服务器托管模型，可在服务器上从 <a href="http://asp.net/">ASP.NET</a> Core 应用中执行应用。 UI 更新、事件处理和 JavaScript 调用是通过 SignalR 连接进行处理。</li>
<li>Blazor 服务器托管模型具有以下几个优点：<ul>
<li>下载大小明显小于 Blazor WebAssembly 应用，且应用加载速度快得多。</li>
<li>应用充分利用服务器功能，包括使用任何与 .NET Core 兼容的 Api。</li>
<li>服务器上的 .NET Core 用于运行应用程序，因此现有的 .NET 工具（如调试）可按预期方式工作。</li>
<li>支持瘦客户端。 例如，Blazor 服务器应用程序适用于不支持 WebAssembly 的浏览器以及资源受限设备上的浏览器。</li>
<li>应用程序的 .NET/C#代码库（包括应用程序的组件代码）不会提供给客户端。</li>
</ul>
</li>
<li>Blazor 服务器托管的缺点：<ul>
<li>通常存在较高的延迟。 每个用户交互都涉及网络跃点。</li>
<li>无脱机支持。 如果客户端连接失败，应用将停止工作。</li>
<li>对于包含多个用户的应用而言，可伸缩性非常困难。 服务器必须管理多个客户端连接并处理客户端状态。</li>
<li>为应用提供服务需要 <a href="http://asp.net/">ASP.NET</a> Core 服务器。 不可能的无服务器部署方案（例如，通过 CDN 为应用提供服务）。</li>
</ul>
</li>
</ul>
<h2 id="三、Razor-Components"><a href="#三、Razor-Components" class="headerlink" title="三、Razor Components"></a>三、Razor Components</h2><h3 id="Blazor-应用基于组件"><a href="#Blazor-应用基于组件" class="headerlink" title="Blazor 应用基于组件"></a>Blazor 应用基于组件</h3><ul>
<li>定义灵活的 UI 呈现逻辑。</li>
<li>处理用户事件。</li>
<li>可以嵌套和重用。</li>
<li>可以作为 Razor 类库或 NuGet 包共享和分发。</li>
</ul>
<h3 id="组件类"><a href="#组件类" class="headerlink" title="组件类"></a>组件类</h3><ul>
<li>在razor组件文件中，使用HTML和C#的组合实现了组件</li>
<li>Blazor中的组件成为Razor组件组件名称必须以大写字符开头</li>
<li>组件是普通的C#类，可以放在项目中任何位置</li>
<li>若要从页面和视图呈现组件：使用<strong>RenderComponentAsync</strong> HTML方法</li>
<li>若要在组件中通过分部视图使用逻辑，请将分部视图逻辑分解为一个组件。</li>
</ul>
<h3 id="生成组件"><a href="#生成组件" class="headerlink" title="生成组件"></a>生成组件</h3><ul>
<li><p>在网页中添加计数器通常使用JavaScript，但是用Blazor时，可以使用C#</p>
</li>
<li><p>浏览器对各组建的请求（由顶部的@page指令指定）导致该组件呈现其内容</p>
</li>
<li><p>在<strong>＠code</strong>块中定义组件状态（属性、字段）和方法用于处理事件或定义其他逻辑</p>
</li>
</ul>
<h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><ul>
<li>使用HTML语法可以将组件添加到其他组件中</li>
<li>使用特性或子内容来指定组件参数，这些参数允许你设置子组件的属性</li>
</ul>
<h3 id="组件参数"><a href="#组件参数" class="headerlink" title="组件参数"></a>组件参数</h3><ul>
<li>由具有<strong>［Parameter］</strong>的组件类上的公共属性定义</li>
</ul>
<h3 id="子内容"><a href="#子内容" class="headerlink" title="子内容"></a>子内容</h3><ul>
<li>组件可以设置另一个组件的内容；分配组件提供用于指定组件标记之间的内容</li>
</ul>
<h3 id="路由到组件"><a href="#路由到组件" class="headerlink" title="路由到组件"></a>路由到组件</h3><ul>
<li><p>由＠page指令指定该组件为路由终结点</p>
</li>
<li><p>如果没有<strong>＠page</strong>指令，组件将无法处理路由的请求，但该组件仍可以被其他组件使用</p>
</li>
</ul>
<h3 id="依赖关系注入"><a href="#依赖关系注入" class="headerlink" title="依赖关系注入"></a>依赖关系注入</h3><ul>
<li>Blzor Server应用程序，在 Startup.ConfigureServices 中注册为<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.0#service-lifetimes">单一实例</a><ul>
<li><strong>＠inject</strong>指令用于将服务实例注入到所需组件中</li>
<li>组件使用注入的服务来检索对象中的数组</li>
</ul>
</li>
<li>blazor WebAssembly应用，则注入了HttpClient</li>
</ul>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><ul>
<li>对组件和DOM元素都是通过<strong>＠bind</strong>属性来完成的</li>
<li>通过使用**@bind:formatDateTime**格式字符串，现在还不能使用其他格式的表达式，如货币或数字格式</li>
</ul>
<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul>
<li>@on{event}格式：onclick、onsubmit、onchange</li>
<li><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/Image.png" alt="image.png"></li>
<li><strong>Lambda表达式</strong></li>
<li><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/Image2.png" alt="image2.png"></li>
</ul>
<h3 id="链式绑定"><a href="#链式绑定" class="headerlink" title="链式绑定"></a>链式绑定</h3><h3 id="捕获对组件的引用"><a href="#捕获对组件的引用" class="headerlink" title="捕获对组件的引用"></a>捕获对组件的引用</h3><blockquote>
<p>组件引用提供了一种方法来引用组件实例，以便可以向该实例发出命令。捕获组件引用：</p>
</blockquote>
<ul>
<li>向子组件添加@ref属性</li>
<li>定义与子组件类型相同的字段</li>
</ul>
<h3 id="在外部调用组件方法以更新状态"><a href="#在外部调用组件方法以更新状态" class="headerlink" title="在外部调用组件方法以更新状态"></a>在外部调用组件方法以更新状态</h3><ul>
<li>Blazor 使用 SynchronizationContext 来强制执行单个逻辑线程。此 SynchronizationContext 上将执行 Blazor 引发的组件生命周期方法和任何事件回调。 如果必须根据外部事件（如计时器或其他通知）更新组件，请使用 InvokeAsync 方法，该方法将调度到 Blazor 的 SynchronizationContext。</li>
</ul>
<h2 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h2>]]></content>
      <categories>
        <category>Microsoft之旅</category>
        <category>Asp.NET Core</category>
      </categories>
      <tags>
        <tag>2019</tag>
        <tag>Microsoft</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>我也不知道在写什么</title>
    <url>/%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E5%9C%A8%E5%86%99%E4%BB%80%E4%B9%88.html</url>
    <content><![CDATA[<h3 id="Singleton与Static的区别"><a href="#Singleton与Static的区别" class="headerlink" title="Singleton与Static的区别"></a>Singleton与Static的区别</h3><h3 id="1-singleton"><a href="#1-singleton" class="headerlink" title="1. singleton"></a>1. singleton</h3><ul>
<li><p>单例模式</p>
<ul>
<li>单例模式，单例模式是一种被广泛使用的设计模式。指的是在应用整个生命周期内只能存在一个实例。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例。即一个类只有一个对象实例。</li>
</ul>
</li>
<li><p>单例模式的特点</p>
<ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其它对象提供这一实例。</li>
</ul>
</li>
<li><p>单例模式的好处</p>
<ul>
<li>使用单例模式可以限制对象实例的个数，除了返回实例的操作之外不能被new出来。这在某些需要限制对象访问的场合下是有用的。使用static的话并不能限制对象实例的个数。</li>
<li>在很多的操作中，比如说是<strong>建立目录、数据库操作</strong>等都需要这样的单线程操作。</li>
<li>最显而易见的好处是<strong>节约开销</strong>，比如数据库单例的好处是，每次你只需要去获取那个数据库的示例就好，不用每次都去创建一个实例。</li>
</ul>
</li>
</ul>
<h3 id="2-static"><a href="#2-static" class="headerlink" title="2. static"></a>2. static</h3><ul>
<li>静态类<ul>
<li>静态类就是一个类里面都是静态方法和静态field，构造器被private修饰，因此不能被实例化。Math类就是一个静态类。</li>
</ul>
</li>
<li>静态类的特点<ul>
<li>只包含静态成员。</li>
<li>无法进行实例化。也就是无法使用new运算符创建类类型的变量，因此可以通过<strong>类名.变量名</strong>直接引用，而不需要new出一个类来</li>
<li>静态方法通常用于创建实用程序函数。不能包含实例构造函数。静态方法的调用直接在类上进行，不能在类的实例上调用。</li>
<li>会进行密封，因此不能继承。 它们不能继承自任何类（除了Object）</li>
</ul>
</li>
<li>静态类的好处<ul>
<li>static类有更好的效率。</li>
<li>编译器可以进行检查。</li>
</ul>
</li>
</ul>
<h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h3><ul>
<li>静态方法只能直接访问本类中的静态成员（通过实例化对象）可以访问到的其它类中的所有成员（包括静态和非静态）</li>
<li>static有更好的访问效率，如果你的singleton不维持任何状态，仅仅是提供全局的访问，这个时候就适合用static，这样速度的也快；</li>
<li>静态类中只能有静态成员，不可以有非静态字段；</li>
<li>单例模式的<strong>灵活性更高</strong>，方法可以被<strong>override</strong>，因为静态类都是静态方法，所以不能被override；</li>
<li>单例模式会提供给你一个<strong>全局唯一的对象</strong>，静态类只是提供给你很多静态方法，这些方法不用创建对象，通过类就可以直接调用；</li>
<li>单例模式最大的好处就是节省内存空间，提高效率，因为他永远都只有一个实例！而static还是有可能被new出多个实例的，而这多个实例在用完之后也许就没用了，还要等待垃圾回收机制来回收，所以效率自然不如单例；</li>
<li>如果是一个非常重的对象，<strong>单例模式可以懒加载，静态类就无法做到</strong>；</li>
</ul>
<hr>
<p><strong>什么是进程？</strong></p>
<ul>
<li>当一个程序开始运行时，它就是一个进程，进程包括运行中的程序和程序所使用到的内存和系统资源。而一个进程又是由多个线程所组成的。</li>
</ul>
<p><strong>什么是线程</strong></p>
<ul>
<li>线程是程序中的一个执行流，每个线程都有自己的专有寄存器(栈指针、程序计数器等)，但代码区是共享的，即不同的线程可以执行同样的函数。</li>
</ul>
<p><strong>什么是多线程？</strong></p>
<ul>
<li>多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</li>
</ul>
<p><strong>多线程的好处：</strong></p>
<ul>
<li>可以提高CPU的利用率。在多线程程序中，一个线程必须等待的时候，CPU可以运行其它的线程而不是等待，这样就大大提高了程序的效率。 </li>
</ul>
<p><strong>多线程的不利方面：</strong></p>
<ul>
<li>线程也是程序，所以线程需要占用内存，线程越多占用内存也越多； </li>
<li>多线程需要协调和管理，所以需要CPU时间跟踪线程； </li>
<li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；</li>
<li>线程太多会导致控制太复杂，最终可能造成很多Bug。</li>
</ul>
<hr>
<p>参考链接：<a href="https://www.cnblogs.com/scotth/p/10450891.html">https://www.cnblogs.com/scotth/p/10450891.html</a></p>
]]></content>
      <categories>
        <category>Microsoft之旅</category>
        <category>C#</category>
      </categories>
      <tags>
        <tag>singleton - static</tag>
      </tags>
  </entry>
  <entry>
    <title>我有属于我的天</title>
    <url>/%E6%88%91%E6%9C%89%E5%B1%9E%E4%BA%8E%E6%88%91%E7%9A%84%E5%A4%A9.html</url>
    <content><![CDATA[<h3 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h3><blockquote>
<p>《蜗牛》是周杰伦在自己事业处于低潮时所创作的，当时周杰伦还未正式出道，整天就是帮其他人写歌，心情非常不好，于是决定写一首歌勉励一下自己，同时也为了鼓励年轻人能够像蜗牛一样为了自己的目标一步一步往前爬。之后许茹芸听了周杰伦为别人所创作的作品，感觉很特别，就联络公司跟周杰伦邀歌，于是周杰伦就把这首《蜗牛》给了许茹芸演唱。</p>
</blockquote>
<hr>
<p><strong>《蜗牛》</strong></p>
<p><strong>作词：周杰伦</strong></p>
<p><strong>作曲：周杰伦</strong></p>
<p><strong>演唱：周杰伦</strong> </p>
<p><strong>该不该搁下重重的壳</strong></p>
<p><strong>寻找到底哪里有蓝天</strong></p>
<p><strong>随着轻轻的风轻轻的飘</strong></p>
<p><strong>历经的伤都不感觉疼</strong></p>
<p><strong>我要一步一步往上爬</strong></p>
<p><strong>等待阳光静静看着它的脸</strong></p>
<p><strong>小小的天有大大的梦想</strong></p>
<p><strong>重重的壳挂着轻轻的仰望</strong></p>
<p><strong>我要一步一步往上爬</strong></p>
<p><strong>在最高点乘着叶片往前飞</strong></p>
<p><strong>小小的天流过的泪和汗</strong></p>
<p><strong>总有一天我有属于我的天</strong></p>
<p><strong>我要一步一步往上爬</strong></p>
<p><strong>在最高点乘着叶片往前飞</strong></p>
<p><strong>任风吹干流过的泪和汗</strong></p>
<p><strong>我要一步一步往上爬</strong></p>
<p><strong>等待阳光静静看着它的脸</strong></p>
<p><strong>小小的天有大大的梦想</strong></p>
<p><strong>我有属于我的天</strong></p>
<p><strong>任风吹干流过的泪和汗</strong></p>
<p><strong>总有一天我有属于我的天</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/post_img/20191227181155.jpg" alt="我伦😊"></p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>Jay</tag>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博文</title>
    <url>/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87.html</url>
    <content><![CDATA[<h2 id="新手写博客应该写些什么"><a href="#新手写博客应该写些什么" class="headerlink" title="新手写博客应该写些什么~"></a>新手写博客应该写些什么~</h2><p>最近刚搭建了这么个博客，奈何自己也是前端小白一枚，苦于不知道该写什么比较好。于是乎，各种问<a href="%5Bhttps://www.baidu.com%5D(https://www.baidu.com/)">度娘</a>，借鉴各种大神的作品，最终总结出如下适合自己目前状况的一种套路：</p>
<blockquote>
<p><strong><code>内容为王，拒绝copy</code></strong></p>
<p><strong><code>一路坚持，总有收获</code></strong></p>
</blockquote>
<a id="more"></a>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/%E4%B8%8B%E8%BD%BD.jpg" alt="你好啊"></p>
<hr>
<h2 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h2><h3 id="入门系列"><a href="#入门系列" class="headerlink" title="入门系列"></a>入门系列</h3><ol>
<li><blockquote>
<p>备忘录</p>
</blockquote>
<p>主要记录平时自己常用到的，容易忽视的一些知识，作为自己<strong>知识的巩固</strong>，也可以写自己收藏的比较好的网站，文章的分享等等，当然也可以写自己最近的<strong>计划</strong>之类的。</p>
</li>
<li><blockquote>
<p>学习笔记</p>
</blockquote>
<p>这一块可以写的东西好多，只要是自己平时get到的技能点，都可以写上去。</p>
<ul>
<li>读书笔记</li>
<li>基础理解</li>
<li>学习心得</li>
</ul>
</li>
<li><blockquote>
<p>踩坑记录</p>
</blockquote>
<p>自己工作中，学习中遇到的各种坑，你可以记录下来，总不能下次遇见在此掉进里面吧…，如果恰巧能帮助到别人一下下，那可是功德一件啊~</p>
</li>
<li><blockquote>
<p>生活随笔</p>
</blockquote>
<p>个人日记什么的，自己个人呢有点想写，但怎么感觉有点怪怪的…</p>
<p>还是觉得，自己的小本本写着比较安心…</p>
<p><code>想写在自己博客的话，文章也是可以加密的！</code></p>
</li>
</ol>
<h3 id="实战类"><a href="#实战类" class="headerlink" title="实战类"></a>实战类</h3><ol>
<li><blockquote>
<p>环境搭建</p>
</blockquote>
</li>
<li><blockquote>
<p>操作记录</p>
</blockquote>
<p><code>主要写一些实战中，某些环境的搭建过程，操作步骤等</code></p>
<hr>
</li>
</ol>
<h4 id="不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如："><a href="#不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如：" class="headerlink" title="不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如："></a>不要担心写的不好什么的，一定要自己动手写！坚持这么一年半载之后呢，就可以写一些比较深的东西了，比如：</h4><blockquote>
<blockquote>
<p>模式的提炼</p>
</blockquote>
<blockquote>
<p>造轮子，各种可复用的组件等</p>
</blockquote>
<blockquote>
<p>各种工具的使用，源码分析</p>
</blockquote>
<blockquote>
<p>开源项目</p>
</blockquote>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-img-1259503129.cos.ap-beijing.myqcloud.com/2227.jpg" alt="走你"></p>
<hr>
<p><strong>和大家一样，我也是刚刚开始，记录以上内容，希望能一起进步。</strong></p>
<p><strong>路漫漫其修远兮，吾将上下而求索！</strong></p>
<p><strong>坚持就是胜利，一起加油呀！</strong></p>
<p><strong>共勉~</strong></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>B站优质up主：<a href="https://www.bilibili.com/video/av56930990?from=search&seid=10919128542170066121">CodeSheep</a></li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>所求为何</title>
    <url>/%E6%89%80%E6%B1%82%E4%B8%BA%E4%BD%95.html</url>
    <content><![CDATA[<h3 id="我是小妖怪"><a href="#我是小妖怪" class="headerlink" title="我是小妖怪"></a>我是小妖怪</h3><blockquote>
<p>“我是小妖怪，逍遥又自在，杀人不眨眼，吃人不放盐！”，头疼的厉害，难道我命不久矣…？<del>&gt;_&lt;</del></p>
<p>尽管丢了我伦的版权，但还是习惯了云村这个温暖的地方，为了不顾此失彼，我下了咪咕音乐😔，占块儿地方而已，皆大欢喜😊</p>
</blockquote>
<hr>
<p><img src= "/img/loading.gif" data-lazy-src="https://picgo-blog-1259503129.cos.ap-beijing.myqcloud.com/top-cover_img/pages-cover/20191223173355.jpg" alt="333"></p>
<h3 id="1-网易云热评《借我》"><a href="#1-网易云热评《借我》" class="headerlink" title="1. 网易云热评《借我》"></a>1. 网易云热评《借我》</h3><blockquote>
<p>“你好，方便借一生说话吗？”</p>
<p>“余生洗耳恭听。”</p>
</blockquote>
<h3 id="2-网易云热评《路过人间》"><a href="#2-网易云热评《路过人间》" class="headerlink" title="2. 网易云热评《路过人间》"></a>2. 网易云热评《路过人间》</h3><blockquote>
<p>人生最好的三个词：</p>
<p>“久别重逢，失而复得，虚惊一场。”</p>
<p>却唯独没有一个词叫“和好如初”，</p>
<p>和好容易，如初多难啊.</p>
</blockquote>
<h3 id="3-网易云热评《熬》"><a href="#3-网易云热评《熬》" class="headerlink" title="3. 网易云热评《熬》"></a>3. 网易云热评《熬》</h3><blockquote>
<p>“你怎么把生活过成现在这个样子的？”</p>
<p>“正常发挥啊。”</p>
<p>“那以后怎么办？”</p>
<p>“熬。”</p>
</blockquote>
<h3 id="4-网易云热评《我爱的人》"><a href="#4-网易云热评《我爱的人》" class="headerlink" title="4. 网易云热评《我爱的人》"></a>4. 网易云热评《我爱的人》</h3><blockquote>
<p>故事不长 也不难讲</p>
<p>只不过是</p>
<p>相识一场 爱而不得</p>
</blockquote>
<h3 id="5-网易云热评《哑巴》"><a href="#5-网易云热评《哑巴》" class="headerlink" title="5. 网易云热评《哑巴》"></a>5. 网易云热评《哑巴》</h3><blockquote>
<p>也许世间最好的默契，</p>
<p>不是有人懂你的言外之意，</p>
<p>而是有人心疼你的欲言又止。</p>
</blockquote>
<h3 id="6-网易云热评《如风过境》"><a href="#6-网易云热评《如风过境》" class="headerlink" title="6. 网易云热评《如风过境》"></a>6. 网易云热评《如风过境》</h3><blockquote>
<p>希望你别像风</p>
<p>在我这里掀起了万般波澜</p>
<p>却又跟云去了远方</p>
</blockquote>
<h3 id="7-网易云热评《偷身》"><a href="#7-网易云热评《偷身》" class="headerlink" title="7. 网易云热评《偷身》"></a>7. 网易云热评《偷身》</h3><blockquote>
<p>“你羡慕我 一身潇洒，无牵无挂，</p>
<p>我却羡慕你，有家，有他，有人等你回家”。</p>
</blockquote>
<h3 id="8-网易云热评《之外》"><a href="#8-网易云热评《之外》" class="headerlink" title="8. 网易云热评《之外》"></a>8. 网易云热评《之外》</h3><blockquote>
<p>高中时一个同学沉迷网络，时常半夜翻墙出校上网。一日他照例翻墙，翻到一半就拔足狂奔而归，面色古怪，问之不语。从此认真读书，不再上网，学校盛传他见鬼了。后来他考上名校，后来我们问到这事，他沉默良久说，那天父亲来送生活费，舍不得住旅馆，在墙下坐了一夜。</p>
</blockquote>
<h3 id="9-网易云热评《Sleepyhead》"><a href="#9-网易云热评《Sleepyhead》" class="headerlink" title="9. 网易云热评《Sleepyhead》"></a>9. 网易云热评《Sleepyhead》</h3><blockquote>
<p>有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了；</p>
<p>有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了 。</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><blockquote>
<p><code>本文内容摘录自网易云热评</code></p>
</blockquote>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>热评</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配方案</title>
    <url>/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<h2 id="移动端自适应布局配置-vw-rem"><a href="#移动端自适应布局配置-vw-rem" class="headerlink" title="移动端自适应布局配置 vw + rem"></a>移动端自适应布局配置 vw + rem</h2><blockquote>
<p>当我们写移动端页面时，会遇到自适应和兼容性等方面的问题，单纯的l指示利用<strong>rem</strong>或者<strong>vw/vh</strong>都不尽人意，有幸看见大神的设计思路，感觉很厉害，由此记录学习~</p>
</blockquote>
<hr>
<h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h3><h4 id="1-1-rem布局与vw-vh"><a href="#1-1-rem布局与vw-vh" class="headerlink" title="1.1 rem布局与vw/vh"></a>1.1 rem布局与vw/vh</h4><ul>
<li><p><strong>rem：</strong>相对于<strong>根元素html</strong>的字体大小的单位</p>
</li>
<li><p><strong>rem布局原理：</strong>根据屏幕分辨率的不同，动态修改根字体的大小，让所有用<strong>rem</strong>为单位的元素跟着屏幕尺寸一起缩放，从而达到自适应的效果。</p>
</li>
<li><blockquote>
<p>例如：宽度为750px的设计稿，尺寸可以这样设定</p>
</blockquote>
</li>
<li><pre><code class="css">html &#123;
    font-size: calc(100vw / 7.5);//除以的7.5是根据设计稿的屏幕宽度来定的，这样750px宽度下根元素字体大小则为750px/7.5=100px=1rem
&#125; 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 1.2 设计思路</span><br><span class="line"></span><br><span class="line">* **根据设计稿将html的gont-size设置为100px；比如750px的设计稿就除以7.5。此时100px&#x3D;1rem，后续计算起来会方便很多。**</span><br><span class="line"></span><br><span class="line">* &gt; 以上设计思路的**最大优点**就是：**方便计算**。</span><br><span class="line"></span><br><span class="line">### 2. 优化</span><br><span class="line"></span><br><span class="line">#### 2.1 重置默认字体</span><br><span class="line"></span><br><span class="line">**考虑到不改变浏览器默认字体大小的展示，因此要重置页面页面字体大小为浏览器默认的大小**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;css</span><br><span class="line">html &#123;</span><br><span class="line">    font-size: calc(100vw &#x2F; 7.5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#app &#123;</span><br><span class="line">    font-size: initial; &#x2F;&#x2F;重置页面字体大小恢复为浏览器默认16px，否则就显示成50px了</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
#### 2.2 限制根元素字体大小的最大值、最小值
</code></pre>
</li>
</ul>
<p><strong><code>上面的设计的页面虽然看起来适配得很好，但是你会发现它会无限制放大，在大屏上很不好看。可以通过给根元素字体大小限制最大最小值，以及 body 也增加最大最小宽度限制，这样就可以改善用户体验了。</code></strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    </span><br><span class="line">    //设置根字体大小单位为vw，页面元素的尺寸单位都设为rem，搭配vw和rem，可实现布局根据视口变化而变化</span><br><span class="line">    <span class="selector-tag">font-size</span>: <span class="selector-tag">calc</span>(100<span class="selector-tag">vw</span> / 7.5);</span><br><span class="line">    // 同时，通过<span class="selector-tag">Media</span> <span class="selector-tag">Queries</span> 限制根元素字体最大最小值</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">320px</span>) &#123;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 64<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">540px</span>) &#123;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 108<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="selector-tag">body</span> 也增加最大最小宽度限制，避免默认100%宽度的 <span class="selector-tag">block</span> 元素跟随 <span class="selector-tag">body</span> 而过大过小</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">540px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><blockquote>
<p>该设计方法简介方便，增加了最大最小宽度的限制，用户视觉体验更好。</p>
</blockquote>
<hr>
<h3 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h3><ul>
<li><a href="https://juejin.im/post/5de72b1f51882512360d3910#heading-13">基于Vue的移动端h5项目总结</a></li>
<li><a href="https://aotu.io/notes/2017/04/28/2017-4-28-CSS-viewport-units/index.html">利用视口单位实现适配布局</a></li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>2019</tag>
        <tag>H5</tag>
        <tag>大前端</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>缘来，你也走过这里</title>
    <url>/%E7%BC%98%E6%9D%A5%EF%BC%8C%E4%BD%A0%E4%B9%9F%E8%B5%B0%E8%BF%87%E8%BF%99%E9%87%8C.html</url>
    <content><![CDATA[<h4 id="为何"><a href="#为何" class="headerlink" title="为何"></a>为何</h4><blockquote>
<p>又是平安夜，应该对这种节日从来不感冒的，但大冷天的，看着人来人往的街道，总会露出姨母般的笑容……😼😼😼</p>
</blockquote>
<hr>
<h4 id="缘来，你也走过这里"><a href="#缘来，你也走过这里" class="headerlink" title="缘来，你也走过这里"></a><strong>缘来，你也走过这里</strong></h4><p>​                           <strong>——作者:零点风声</strong><br><strong>天地之大，</strong></p>
<p><strong>芸芸众生，</strong></p>
<p><strong>人来人往擦肩而过；</strong></p>
<p><strong>未曾奢想，</strong></p>
<p><strong>与之相逢，</strong></p>
<p><strong>萍水交集缘深缘浅；</strong></p>
<p><strong>偶感欣喜，</strong></p>
<p><strong>时有叹息，</strong></p>
<p><strong>若非前世因果循环，</strong></p>
<p><strong>岂能今生机缘巧遇；</strong></p>
<p><strong>情之无偿，</strong></p>
<p><strong>義之无余，</strong></p>
<p><strong>此后便是魂牵梦绕；</strong></p>
<p><strong>绝之无情，</strong></p>
<p><strong>断之无义，</strong></p>
<p><strong>此后便是肝肠寸断；</strong></p>
<p><strong>莽然回首，</strong></p>
<p><strong>心静如水，皆如往常；</strong></p>
<p><strong>若无相识，便无思愁，</strong></p>
<p><strong>岂会朝朝暮暮眷恋；</strong></p>
<p><strong>若无相望，便无欲求，</strong></p>
<p><strong>岂会日日夜夜期盼；</strong></p>
<p><strong>若无……缘来缘去</strong></p>
<p><strong>何须介怀。</strong></p>
<blockquote>
<p>平安夜…快乐一下</p>
<p>……</p>
<p>回家睡觉🙁</p>
</blockquote>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
</search>
